["function _66c7d6e823fa60bc5721c0b45cf41acbb13bdd10(){};",250704,36,91,1048485,1048576,17237,1075726,81114,1157309,15620,"{@link Ext.TitleBar}'s are most commonly used as a docked item within an",1012828,32,"e main difference between a {@link Ext.TitleBar} and an {@link Ext.Toolbar} is that\n *",1172693,33," is **always** centered horizontally in a {@link Ext.TitleBar} between\n * any items aligned left or right.\n *\n * You can also give items of a {@link Ext.TitleBar} an `align` configuration of `left` or `right`\n * which will dock them to the `left` or `right` of the bar",1166069,39,1881774,45,"xtype: 'titlebar',\n *",1081008,35,254739,32,863679,45,"iconCls: 'add',\n *                 align: 'left",1166432,56,"iconCls: 'home',\n *                 align: 'right'",1358704,39,");\n *\n *     Ext.Viewport.setStyleHtmlContent(true);\n *     Ext.Viewport.setHtml('This shows the title being centered and buttons using align <i>left</i> and <i>right</i>.');\n *\n * <br />",1078973,39,1156966,34,"titlebar',\n *",1081008,35,254739,32,863679,45,"align: 'left',\n *                 text: 'This button has a super long titl",722912,57,"iconCls: 'home',\n *                 align: 'right'",1358704,39,");\n *\n *     Ext.Viewport.setStyleHtmlContent(true);\n *     Ext.Viewport.setHtml('This shows how the title is automatically moved to the right when one of the aligned buttons is very wide.');\n *\n * <br />",1078973,39,1156966,34,"titlebar',\n *",1081008,35,"title: 'A very long title',",722784,57,"align: 'left',\n *                 text: 'This button has a super long titl",722912,57,"align: 'right',\n *                 text: 'Another button'",1358704,39,");\n *\n *     Ext.Viewport.setStyleHtmlContent(true);\n *     Ext.Viewport.setHtml('This shows how the title and buttons will automatically adjust their size when the width of the items are too wide..');",1165871,35,"Toolbar's is {@link Ext.Button button}.\n */\nExt.define('Ext.TitleBa",2070463,35,"    xtype: 'title",1168847,86,1168960,88,1169056,112,1169056,44,"cls: Ext.baseCSSPrefix + 'navigation-",1169134,58,"Style options for Toolbar. Either 'light' or 'dark",947935,44,1169376,48,1169434,137,"titleAlign\n         * The alignment for t",1169454,71,"Align: 'cente",1169136,42,1169571,154,1170075,149,1013903,38,1171237,34,136992,37,1025420,56,"TitleBar. The {@link #defaultType} of\n         * a TitleBar is {@link Ext.Button}, so you do not need to specify an `xtype` if you are adding\n         * buttons",732895,37,"give items a `align` configuration which will align the item to the `left` or `right` of\n         * the TitleBa",1388288,44,"item",1174688,32,"cfg {String} maxButtonWidth The maximum width of the button by percentag",1729728,43,"maxButtonWidth: '40%'\n    },\n\n    platformConfig: [{\n        theme: ['Blackberry', 'Tizen'],\n        titleAlign: 'left'\n    }, {\n",1835127,38,"maxButtonWidth: '80%'\n    }]",1171316,35,1835690,39,"this.applyItems = this.applyInitialItems",547326,47,"delete this.applyItems;\n\n        this.add(this.initialItems);\n        delete this.initialItems",1014248,33,"painted: 'refreshTitlePosition'",1754656,39,"    },\n\n    applyInitial",806545,37,"me = this,\n            titleAlign = me.getTitleAlign()",1035979,41," || {};\n\n        me.initialItems = items;\n\n        me.leftBox = me.add({\n",2070928,44,"style: 'position: relative',\n            layout: {\n    ",1171247,38,"    align: 'center'\n            }",953707,43,"resize: 'refreshTitlePosition',\n",1504459,38,"}\n        });\n\n        me.spacer = me.add({\n",984912,44,"style: 'position: relative',\n",2070964,33,"listeners: {\n                resize: 'refreshTitlePosition',\n",1504459,38,"}\n        });\n\n        me.rightBox = me.add({\n",2070928,44,"style: 'position: relative',\n            layout: {\n    ",1171247,38,"    align: 'center'\n            }",953707,43,"resize: 'refreshTitlePosition',\n",1504459,38,"}\n        });\n\n\n        switch(titleAlign) {\n            case 'left':\n                me.titleComponent = me.leftBox.add({\n ",1069217,32,"',\n        ",1114304,38,"title-align-left',\n                    hidden: defaults.hidden\n",1115087,36,"me.refreshTitlePosition = Ext.emptyFn;\n",633904,36,"'right':\n                me.titleComponent = me.rightBox.add({\n ",1069217,32,"',\n        ",1114304,38,"title-align-right',\n                    hidden: defaults.hidden\n",1115087,36,"me.refreshTitlePosition = Ext.emptyFn;\n            break",625039,39,"me.titleComponent = me.add({\n ",1069217,32,"',\n                    hidden: defaults.hidden,\n                    centered: tru",286237,34,"break;\n        }\n\n        me.doAdd = me.doBoxAdd;\n        me.remove = me.doBoxRemove;\n        me.doInsert = me.doBoxInsert;\n    },\n\n    doBoxAdd: function(item) {\n        if (item.config.align == 'right') {\n            this.rightBox.add(item",995264,45,"leftBox.add",873312,32,"BoxR",1039419,41,"if (item.config.align == 'right') {\n            this.rightBox.remove(item, destroy",995264,45,"leftBox.remove(item, destroy);\n        }\n    },\n\n    doBox",1045935,40,"if (item.config.align == 'right') {\n            this.rightBox",1047294,40,"else {\n            this.leftBox",1047294,36,"},\n\n    calculateMaxButtonWidth: function() {\n        var maxButtonWidth = this.getMaxButtonWidth();\n\n        //check if it is a percentage\n        if (Ext.isString(maxButtonWidth)) {\n            maxButtonWidth = parseInt(maxButtonWidth.replace('%', ''), 10);\n        }\n        maxButtonWidth = Math.round((this.element.getWidth() / 100) * maxButtonWidth);\n\n        return maxButtonWidth;\n    },\n\n    refreshTitlePosi",781406,36,778187,54,"var titleElement = this.titleComponent.renderElement;\n\n        titleElement.setWidth(null);\n        titleElement.setLeft(null);\n\n        //set the min/max width of the left button\n        var leftBox = this.leftBox,\n            leftButton = leftBox.down('button'),\n            singleButton = leftBox.getItems().getCount() == 1,\n            leftBoxWidth, maxButtonWidth;\n\n        if (leftButton && singleButton) {\n            if (leftButton.getWidth() == null) {\n                leftButton.renderElement.setWidth('auto');\n            }\n\n            leftBoxWidth = leftBox.rend",857909,34,"maxButtonWidth = this.calculateMaxButtonWidth();\n\n            if (leftBoxWidth > maxButtonWidth) {\n                leftButton.renderElement.setWidth(maxButtonWidth",530336,36,"var spacerBox = this.spacer.renderElement.getPageBox();",970766,47,"titleElement.setWidth(spacerBox.width);\n        }\n\n        var titleBox = titleE",794381,33,"widthDiff = titleBox.width - spacerBox.width,\n            titleLeft = titleBox.left,\n            titleRight = titleBox.right,\n            halfWidthDiff, leftDiff, rightDiff;\n\n\n        if (widthDiff > 0) {\n            halfWidthDiff = widthDiff / 2;\n            titleLeft += halfWidthDiff;\n            titleRight -= halfWidthDiff;\n            titleElement.setWidth(spacerBox.width);\n        }\n\n        leftDiff = spacerBox.left - titleLeft;\n        rightDiff = titleRight - spacerBox.right;\n\n        if (leftDiff > 0) {\n            titleElement.setLeft(leftDiff);\n        }\n        else if (rightDiff > 0) {\n            titleElement.setLeft(-rightDiff);\n        }\n\n        titleElement.repaint(",1171933,61,") {\n        this.titleComponent.setTitle(newTitle);\n",1866003,50,"refreshTitlePosition(",1385312,54,1172952,541156,"\n * WebStorageProxy is simply a superclass for th",1370332,37,"LocalStorage} proxy. It uses the\n * new HTML5 key/value client-side storage objects to save {@link Ext.data.Model model instances} for offline use",353983,34,"data.proxy.WebStorage",1469437,33,"Cli",1805486,35,"data.WebStorageProxy',\n\n",1699029,49,888941,43,"The unique ID used as the key in which all record data are stored in the local storage object",1707725,47,"/ WebStorage proxies dont use readers and writers",1086992,41,"hide",1479324,35,833774,39,"@hide\n         */\n        writer",1028096,47,1446886,38,"true if you want the webstorage proxy to comply\n         * to the paging params set on the store",1447037,42,"false,\n\n\t\tdefaultDateFormat: 'Y-m-d H:i:s.u'",1131376,36,"proxy, throws an error if local storage is not supported in the current brows",1372080,117,1801664,32,1418623,34,"cache\n         * Cached map of records already retrieved by this Proxy. Ensures that the same instance is always retrieved.\n         */\n        this.cache = {};\n\n        if (this.getStorageObject()",459292,34,"Logger.error(\"Local Storage is not supported in this browser, please use another type of data proxy\");\n        }",1644955,52,"if (!this.getId()) {\n            this.setId(model.modelName)",1165487,37,"arguments)",1377463,33,"create",1402892,49,1691066,50,"length ",1691296,35,"    = this.getIds(),\n            id, record, i;\n\n",1385201,33,228672,51,1347024,33,"if (!this.getModel().getIdentifier().isUnique) {",224541,33,"'Your identifier generation strategy for the model does not ensure unique id\\'s. Please use the UUID strategy, or implement your own identifier strategy with the flag isUnique.');\n\n            }\n",1553153,33,"\n            this",1758713,32,"ids.push(id);\n        }\n\n        this.setIds(ids);\n\n",1385086,42,1403199,36,1453790,72,"this, operation);\n        }",1377464,32,"read",1402892,49,"var records    = [],\n            ids        = this.getIds(),\n            model     ",1323439,32,1350147,48,"params     = operation.getParams() || {}",1456361,106,1456507,72,"            length     = i",1767930,32,", collection;\n\n        //read a single record\n        if (params",1351562,42,"record = this.getRecord(params[idProperty]);\n",1533376,42,"records.push(record);\n    ",1403187,39,890432,32,498556,36,"ength",1691538,34,"this.getRecord(ids[i])",1533370,52,"records",1657238,33,"            }\n\n            collection",1262352,35,");\n\n            // First we comply to filters\n            if (filters && filters.length) {\n                collection.setFilters(filt",1010815,32,"// Then we comply to sorters\n            if (sorters && ",929510,34,"collection.set",1457808,32,"\n            collection.addAll(records);\n\n            if (this.getEnablePagingParams() && start !== undefined && limit",1587358,34,"records = collection.items.slice(start, start + limit",464704,40,"records = collection.items.slic",782128,32,"operation.setSuccessful();\n        }\n\n",1385086,34,"\n        operation.setResultSet(Ext.create('Ext.data.ResultSet', {\n",1398008,42,"total  : records.length,\n            loaded : true\n        }));\n        operation.setRecords(records);\n",1453781,81,"this, operation);\n        }",1377464,32,"update",1402892,49,1691066,50,"length ",1691296,35,"    = this.getIds(),\n            record, id, i;\n\n",1385201,33,228672,51,1347024,33,"this.setRecord(record);\n\n            //we need to update the set of ids here because it's possible that a non-phantom record was added\n            //to this proxy - in which case the record's id would never have been added via the normal 'create' call\n",1553153,45,"if (id !== undefined && ",1586096,52,"ids.push(id",541343,35,"this.setIds(ids);\n\n",1385086,42,1403199,36,1453790,72,"this, operation);\n        }\n    },\n\n    //inherit\n    destroy",1402892,49,1691066,50,"length ",1691296,35,"    = this.getIds(),\n\n            //newIds is a copy of ids, from which we remove the destroyed records\n            newIds  = [].concat(ids),\n            i;\n\n",1385201,33,228672,51,"Ext.Array.remove(newIds, records[i].getId());\n            this.removeRecord(records[i], ",773198,36,"ds(newIds);\n\n",1385086,42,1403199,36,1453790,72,"this, oper",782190,56," Fetches a model instance from the Proxy by ID. Runs each field's decode function (if present) to decode the data",1662638,32,"record's unique ID",1576398,37,"model instance or undefined if the record did not exist in the storage.\n     */\n    getRecord: function(id) {\n        if (this.cache[i",1663516,32,"var recordKey = this.getRecordKey(id),\n                item = this.getStorageObject().getItem(recordKey),\n                data    = {},\n                Model  ",1323439,32,"    fields  = Model",1560593,32,"    length  = fields.length,\n                i, field, name, record, rawData, rawValue;\n\n    ",1035748,33,"    return undefined;\n            }\n\n            rawData = Ext.decode(item)",1995200,32,1196413,32,"eld = fields[i];\n                name  = field.getName();\n\t\t\t\trawValue = rawData",138502,36,"field.getDecode()",1534782,38,"data[name] = field.getDecode()(rawV",648351,52,1374842,38,"\t\t\t\t\t\tdata[name] = this.readDate(field, rawValue",1519296,57,"ata[name] = rawV",465311,60,"\n            record = new Model(data, id);\n            this.cache[id] = record",789920,35,"che[id]",1573620,35,"given record in the Proxy. Runs each field's encode function (if present) to encode the data",1660064,33,"record The m",1583582,35,"} [id] The id to save the record under (defaults to the value of the record's getId() function)\n     */\n    setRecor",1552961,34,"if (id) {\n            record.setId(id",1292432,32,"id = record.getId(",1201088,49,"rawData = record.getData(),\n            data    = {},\n            Model  ",1341484,37," = Model",1560593,33,"ength  = field",1352392,41,"rawValue, field, name, obj, k",1352475,51,1562575,36," = field.getName();\n\t\t\trawValue = rawData[name];\n\n",1374656,34," === false",437038,44,"\n            if (typeof field.getEncode()",1534782,34,"data[name] = field.getEncode()(rawValue, rec",1109312,43,1374842,34," && Ext.isDate(rawValue)) {\n\t\t\t\t\tdata[name] = this.writeDate(field, rawV",648351,52,"data[name] = rawV",96096,57,"obj = me.getStorageObject();\n        key = me.getRecordKey(id);\n\n        //keep the cache up to date\n        me.cache[id] = record;\n\n        //iPad bug requires that we remove the item before setting it\n        obj.removeItem(key);\n        try {\n            obj.setItem(key, Ext.encode(data));\n        } catch(e)",1406192,48,"e);\n        }\n\n        record.commit(",330976,42,"Physically removes a given record from the local storage. Used internally\n     * by {@link #destroy}, which you should use instead because it updates the\n     * list of currently-stored record ids.\n     * @param {String/Number/Ext.data.Model} id The id of the record to remove,\n     * or an Ext.data.Model instance.\n     * @param {Boolean} [updateIds] False to skip saving the array of ids\n     * representing the set of all records in the Proxy.\n     */\n    removeRecord: function(id, updateI",1739838,41,"ids;\n\n        if (id.isModel) {\n            id = id.getId();\n        }\n\n        if (updateIds !== false) {\n            ids = me.getIds(",1292876,32,"ids, id);\n            me.setIds(ids);",885805,32,"cache[id];\n        me.getStorageObject().removeItem(me.getRecordKey(id)",330976,42,"Given the id of a record, returns a unique string based on that id and the id of this proxy. This is used when\n     * storing data in the local storage object and should prevent naming collisions.\n     * @param {String/Number/Ext.data.Model} id The record id, or a Model instance\n     * @return {String} The unique key for this record\n     */\n    getRecordKey: function(id) {\n        if (id.isModel) {\n            id = id.get",1057389,32,"Ext.String.format(\"{0}-{1}\", this.getId(), i",1579791,43,"Returns the array of record IDs stored in this Proxy\n     * @return {Number[]} The record IDs. Each is cast as a Number\n     */\n    getIds: function() {\n        var ids    = (this.getStorageObject().getItem(this.getId()) || \"\").split(\",\"),\n            length = id",512239,39,"ength == 1 && ids[0] === \"\") {\n            i",1349610,35,"id",1043200,41," Saves the array of ids representing the set of all records in the Proxy\n     * @param {Number[]} ids The ids to set\n     */\n    setIds: function(ids) {\n        var obj = this.getStorageObject(),\n            str = ids.join(\",\"),\n            id  = this.getId();\n\n        obj.removeItem(id);\n\n        if (!Ext.isEmpty(str)) {\n",274432,34,"obj.setItem(id, str);\n            } catch(e)",771276,34,"exception', ",1951119,33,"\n    },\n\n\t",1372802,35,"\t\tif (Ext.isEmpty(date)) {\n\t\t\treturn null;\n\t\t}\n\n\t\t",1372902,42,"this.getDefaultDateFormat();\n\t\tswitch (dateFormat) {\n\t\t\tcase 'timestamp':\n\t\t\t\treturn date.getTime() / 1000;\n\t\t\tcase 'time':\n\t\t\t\treturn date.getTime();\n\t\t\tdefault:\n\t\t\t\t",1373162,42,"\t\t}\n\t},\n\n\treadDate: function(field, date) {\n\t\tif (Ext.isEmpty(date)) {\n\t\t\treturn null;\n\t\t}\n\n\t\t",1372902,42,"this.getDefaultDateFormat();\n\t\tswitch (dateFormat) {\n\t\t\tcase 'timestamp':\n\t\t\t\treturn new Date(date * 1000);\n\t\t\tcase 'time':\n\t\t\t\treturn new Date(date)",625039,46,"Ext.isDate(date) ? date : Ext.Date.parse(date, dateFormat);\n\t\t}\n\t",563920,35,"Sets up the Proxy by claiming the key in the storage object that corresponds to the unique id of this Proxy. Called\n     * automatically by the constructor, this should not need to be called again unless {@link #clear} has been called",1217423,47,996560,36,"var storageObject = this.getStorageObject();\n        try {\n            storageObject.setItem(this.getId(), storageObject.getItem(this.getId()) || \"\");\n        } catch(e)",1406192,48,813743,37,"Destroys all records stored in the proxy and removes all keys and values used to support the proxy from the\n     * storage object",488880,42,"var obj = this.getStorageObject(),\n            ids = this.getIds(),\n            len = id",512239,34,"//remove all the records",485768,49,"this.removeRecord(ids[i], false);\n        }\n\n        //remove the supporting objects\n        obj.removeItem(this.getId()",330976,42,"Abstract function which should return the storage object that data will be saved to. This must be implemented\n     * in each subclass.\n     * @return {Object} The storage object\n     */\n    getStorageObjec",1459855,46,"getStorageObject function has not been defined in your Ext.data.proxy.WebStorage subclass\"",1328624,42," @aside guide proxies\n *\n * The LocalStorageProxy uses the new HTML5 localStorage API to sav",1356463,32,"ata locally on the\n * client browser. HTML5 localStorage is a key-value store (e.g. cannot save complex objects like JSON), so\n * LocalStorageProxy automatically serializes and deserializes data when saving and retrieving it.\n *\n * localStorage is extremely useful for saving user-specific information without needing to build server-side\n * infrastructure to support it. Let's imagine we're writing a Twitter search application and want to save the user's\n * searches locally so they can easily perform a saved search again later. We'd start by creating a Search model",1496901,117,"'id', 'query",1545038,54,"localstorage',\n *                 id  : 'twitter-Searches'",1329632,48,"Our Search model contains just two fields - id and query - plus a Proxy definition. The only configuration we need to\n * pass to the LocalStorage proxy is an {@link #id}. This is important as it separates the Model data in this Proxy from\n * all others. The localStorage API puts all data into a single shared namespace, so by setting an id we enable\n * LocalStorageProxy to manage the saved Search data.\n *\n * Saving our data into localStorage is easy and would usually be done with",1547103,43,"//our Store automatically picks up the LocalStorageProxy defined on the Search model",1697792,41,"Store', {\n *         model: \"Search\"\n *     });\n *\n *     //loads any existing Search data from localStorage\n *     store.load();\n *\n *     //now add some Searches\n *     store.add({query: 'Sencha Touch'});\n *     store.add({query: 'Ext JS'});\n *\n *     //finally, save our Search data to localStorage\n *     store.sync();\n *\n * The LocalStorageProxy automatically gives our new Searches an id when we call store.sync(). It encodes the Model data\n * and places it into localStorage. We can also save directly to localStorage, bypassing the Store altogether:\n *\n *     var search = Ext.create('Search', {query: 'Sencha Animator'});\n *\n *     //uses the configured LocalStorageProxy to save the new Search to localStorage\n *     search.save();\n *\n * # Limitations\n *\n * If this proxy is used in a browser where local storage is not supported, the constructor will throw an error. A local\n * storage proxy requires a unique ID which is used as a key in which all record data are stored in the local storage\n * object.\n *\n * It's important to supply this unique ID as it cannot be reliably determined otherwise. If no id is provided but the\n * attached store has a storeId, the storeId will be used. If neither option is presented the proxy will throw an error.",1399835,32,"LocalStorage",1469437,33,"WebStorage',\n    alias: 'proxy.localstorage",1375678,37,"LocalStorageProxy',\n\n    //inherit docs\n    getStorageObjec",2057966,38,"localStorage",1539616,43,1714110,352780,"Vuelo",2081088,513,2068024,1895,2078820,685," \n",46240,37,2079505,147,"type: 'localstorage",2079637,137,"store/Partida",2078832,520,"Partida",2079358,147," \n",46240,37,2079505,82,"Partidas',",1699069,37,"ajax',\n            type: 'localstorage",2079637,143,"yContainer",2081088,518,"My",1751054,81,"\n ",2070538,74," \n",940793,53,2070643,251,2082048,114,2071278,39,"height: 60",2086981,38,2087023,35,"margin: '",2087074,34,"Arrivals",304640,45,1162036,67,"height: 60",2086981,38,"Departures',\n        ",2080959,45,2080996,39,1163213,109,2070976,1243,1162144,56,2071851,110,"hidde",1412816,33,"id: 'lstPartidas',\n       ",1882065,42,2071980,102,"                          <div>{destino",2072094,35,",\n                            '",2072128,61,"Partidas",1162336,55,2068576,32,2070940,36,2071031,32,2070742,35,"details",2071072,58,"10",2082048,81,"title",2071248,74,"titleBarDetails',\n                        title: 'Vuelo',\n        ",2086895,45,1164256,34,2086958,49,"        docked: 'left'",1603472,34,"id: 'btnBackDetals'",1603472,34,"iconCls: 'arrow_left'\n        ",18350,38,1159886,53,1162036,34,"c",1069581,35,2082382,32,"        id: 'info',\n        ",2086895,45,1164256,34,1163278,44,"                centered: fals",1603471,35,"id: 'photo'",1603472,34,"t",2072047,34,"        '<h2>{nVuelo}</h2>'",1603472,38,"'<h2>{aerolinea}</h2>'",1603472,38,"'<h2>{origen}</h2>'\n",46240,32,"]\n        ",18350,38,"        ",1003376,55,2072251,2176,",\n            \"#lstArribos\": {\n                itemtap: 'onArrivalsList",2074205,33,"#btnBackDet",2074253,32,"BackDetai",2074297,41,"#lstPartidas\": {\n                itemtap: 'onDeparturesListTap'",1789104,39,2074452,52,"\n",2077371,36,2072525,73,"Menu",2072608,47,2077856,43,2077040,338,"/*",2077378,382,2077760,199," */\n\n",2072950,100,"var c = Ext.getCmp('main-toolbar');\n        var p = Ext.getCmp('lstPartidas');\n        p.hide();\n        var a = Ext.getCmp('lstArribos');\n        a.show();\n        c.setTitle('Arribos');\n\n        Aeropuerto.app.getController('Global').getArrivals();",2077960,168,"/*",2078128,416,"*/\n\n",2072950,100,"var c = Ext.getCmp('main-toolbar');\n        c.setTitle('Partidas');\n        var p = Ext.getCmp('lstPartidas');\n        p.show();\n        var a = Ext.getCmp('lstArribos');\n        a.hide();\n\n        Aeropuerto.app.getController('Global').getDepartures();\n    },\n\n    onArrivalsListTap: function(dataview, index, target, record, e, eOpts) {\n        this.goToDetails(dataview, index, target, record, e, eOpts);\n    },\n\n    onBackDetai",2074462,50,"var c = Ext.getCmp('details');\n",2078158,46,"right', duration: 120});\n    },\n\n    onDeparturesListTap: function(dataview, index, target, record, e, eOpts) {\n        this.goToDetails(dataview, index, target, record, e, eOpts",2078542,52,"Aeropuerto.app.getController('Global').getArrivals();\n\n    },\n\n    goToDetails: function(dataview, index, target, record, e, eOpts) {\n                var info;\n\n        ",1533372,50,"    var c = Ext.getCmp('details');\n                ",2072525,41,"               alert(\"MUERTEEE",1418368,50,"    //    c.setTitle(\"Vuelo\");\n",1163728,32," set the info\n                            info = c.child('#info');\n                            info.child('#photo').setData(record.data);\n                           // info.child('#data').setData(record.data);\n\n        //var se = Ext.Viewport.getActiveItem();\n          //                  alert(se.id);\n",1167635,32,"p = Ext.getCmp('lstPartidas');\n              //  p.hide();\n                var a = Ext.getCmp('lstArribos');\n              //  a.hide();\n               //container.push(c);\n                            c",2072854,36,"left', duration: 120",1010143,34,2073471,35,"Globa",2066896,514,"controller.Global",1232463,44,"config: {\n        urlServer: 'http://10.0.1.182",2084196,79,2084271,354,"this.getFlight",2084651,55,"Departur",211945,33,2084279,235,"Departure",2084521,52,"Departures",2075687,32,"            this.getFlights('GetDepartures', 'Partidas', xmlParams);\n    },\n\n    getFlight",2084711,50,2075722,54,"         url: this.getUrlServer(),\n        ",2084836,68,2084896,43,2084931,75,2084998,71,"       ",1159551,32,2075930,36,2085120,48,2076127,60,2085212,99,2085303,69,2085364,59,2085415,53,2085643,47,2085499,71,2085562,55,2085609,42,2085643,47,2085682,43,"       ",1159551,32,2076591,52,2076295,33,"Text",221136,35,2085802,56,142592,35,");",2082454,596,"    models: [\n        null",2083124,56,",\n        'Partidas'\n    ],\n    views: [\n        null,\n        null",2083235,70,",\n        'Global",2083304,144,2087315,72]