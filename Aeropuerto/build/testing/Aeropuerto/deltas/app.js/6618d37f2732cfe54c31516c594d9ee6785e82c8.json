["function _8b1aa0772925ab9c487eac9b4ab99a82b9078193(){};",250704,36,91,1048485,1048576,656601,"Tommy Maintz\n *\n * This class generates UUID's according to RFC 4122. This class has a default id property.\n * This means that a single instance is shared unless the id property is overridden. Thus,\n * two {@link Ext.data.Model} instances configured like the following share one generator",1433766,42,"X",1433808,90,"'uuid'",1331408,46,"'MyApp.data.MyModelY",1433808,90,"'uuid",1474367,32,"This allows all models using this class to share a commonly configured instance.\n *\n * # Using Version 1 (\"Sequential\") UUID's\n *\n * If a server can provide a proper timestamp and a \"cryptographic quality random number\"\n * (as described in RFC 4122), the shared instance can be configured as follows:\n *\n *     Ext.data.identifier.Uuid.Global.reconfigure({\n *         version: 1,\n *         clockSeq: clock, // 14 random bits\n *         salt: salt,      // 48 secure random bits (the Node field)\n *         timestamp: ts    // timestamp per Section 4.1.4\n *     });\n *\n *     // or these values can be split into 32-bit chunks:\n *\n *     Ext.data.identifier.Uuid.Global.reconfigure({\n *         version: 1,\n *         clockSeq: clock,\n *         salt: { lo: saltLow32, hi: saltHigh32 },\n *         timestamp: { lo: timestampLow32, hi: timestamptHigh32 }\n *     });\n *\n * This approach improves the generator's uniqueness by providing a valid timestamp and\n * higher quality random data. Version 1 UUID's should not be used unless this information\n * can be provided by a server and care should be taken to avoid caching of this data.\n *\n * See [http://www.ietf.org/rfc/rfc4122.txt](http://www.ietf.org/rfc/rfc4122.txt) for details.",1434059,37,"Uuid', {\n    extend: 'Ext.data.identifier.Simple',\n    alias: 'data.identifier.uuid',\n\n    /**\n     * Provides a way to determine if this identifier supports creating unique IDs. Proxies lik",1370332,36,"}\n     * need the identifier to create unique IDs and will check this property.\n     * @property isUnique",1547870,52,"Uniqu",1626286,47,"The id for this generator instance. By default all model instances share the same\n         * UUID generator instance. By specifying an id other then 'uuid', a unique generator instance\n         * will be created for",1479172,32,"i",1626575,39,"property {Number/Object} salt\n         * When created, this value is a 48-bit number. For computation, this value is split\n         * into 32-bit parts and stored in an object with `hi` and `lo` properties.\n         */\n        sal",947808,34,"property {Number/Object} timestamp\n         * When created, this value is a 60-bit number. For computation, this value is split\n         * into 32-bit parts and stored in an object with `hi` and `lo` properties.\n         */\n        timestamp",729632,38,"Number} version\n         * The Version of UUID. Supported",811852,35," * 1 : Time-based, \"sequential\" UUID.\n         *  * 4 : Pseudo-random UUID.",1428141,35,"is 4.\n         */\n        version: 4",889422,49,"id",1663518,36," Ext.data.identifier.Uuid.Global;\n        }",398009,32,933712,94,"parts = [];\n        me.init();\n    },\n\n    /**\n     * Reconfigures this generator given new config properties.\n     */\n    reconfigur",787135,35,"setConfig(config);\n        this.init(",666558,35,288192,39,"parts = me.parts,\n            version = me.getVersion(),\n            salt = me.getSalt(),\n            time = me.getTimestamp();\n\n        /*\n           The magic decoder ring (derived from RFC 4122 Section 4.2.2):\n\n           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n           |                          time_low                             |\n           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n           |           time_mid            |  ver  |        time_hi        |\n           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n           |res|  clock_hi |   clock_low   |    salt 0   |M|     salt 1    |\n           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n           |                         salt (2-5)                            |\n           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n                     time_mid      clock_hi (low 6 bits)\n            time_low     | time_hi |clock_lo\n                |        |     |   || salt[0]\n                |        |     |   ||   | salt[1..5]\n                v        v     v   vv   v v\n                0badf00d-aced-1def-b123-dfad0badbeef\n                              ^    ^     ^",357922,33,"   |     multicast (low bit)\n",46240,35,"|\n",46240,32,"reserved (upper 2 bits)\n        */\n        parts[0] = me.toHex(time.lo, 8);\n        parts[1] = me.toHex(time.hi & 0xFFFF, 4);\n        parts[2] = me.toHex(((time.hi >>> 16) & 0xFFF) | (version << 12), 4);\n        parts[3] = me.toHex(0x80 | ((me.clockSeq >>> 8) & 0x3F), 2) +\n                   me.toHex(me.clockSeq & 0xFF, 2);\n        parts[4] = me.toHex(salt.hi, 4) + me.toHex(salt.lo, 8);\n\n        if (version == 4) {\n            me.init(); // just regenerate all the random values...",1605600,34,"equentially increment the timestamp...\n            ++time.lo;\n            if (time.lo >= me.twoPow32) { // if (overflow)\n                time.lo = 0;\n                ++time.hi",1305216,42,"parts.join('-')",1212758,60,"ini",671289,52,"salt = me.getSalt(),\n            time = me.getTimestamp();\n\n        if (me.getVersion() == 4) {\n            // See RFC 4122 (Secion 4.4)\n            //   o  If the state was unavailable (e.g., non-existent or corrupted),\n            //      or the saved node ID is different than the current node ID,\n            //      generate a random clock sequence value.\n            me.clockSeq = me.rand(0, me.twoPow14-1);\n\n            if (!salt) {\n                salt = {};\n                me.setSalt(salt",498400,34,"!time) {\n                time = {};\n                me.setTimestamp(ti",180655,32,"// See RFC 4122 (Secion 4.4)\n            salt.lo = me.rand(0, me.twoPow32-1);\n            salt.hi = me.rand(0, me.twoPow16-1);\n            time.lo = me.rand(0, me.twoPow32-1);\n            time.hi = me.rand(0, me.twoPow28-1",1374416,35,"this is run only once per-instance\n            me.setSalt(me.split(me.getSalt()));\n            me.setTimestamp(me.split(me.getTimestamp()));\n\n            // Set multicast bit: \"the least significant bit of the first octet of the\n            // node ID\" (nodeId = salt for this implementation):\n            me.getSalt().hi |= 0x100",110528,35,"Some private values used in methods on this class.\n     * @private\n     */\n    twoPow14: Math.pow(2, 14),\n    twoPow16: Math.pow(2, 16),\n    twoPow28: Math.pow(2, 28),\n    twoPow32: Math.pow(2, 32),\n\n    /**\n     * Converts a value into a hexadecimal value. Also allows for a maximum length\n     * of the returne",1678457,32,"value\n",228347,35,"* @private\n     */\n    toHex: function(value, length) {\n        var ret = value.toString(16);\n        if (ret.length > length) {\n            ret = ret.substring(ret.length - length); // right-most digits\n        } else if (ret.length < length) {\n            ret = Ext.String.leftPad(ret, length, '0');",420327,54,"Generates a random value with between a low and high.\n     * @param {Number} low\n     * @param {Number} high\n     * @private\n     */\n    rand: function(low, high) {\n        var v = Math.random() * (high - low + 1);\n        return Math.floor(v) + low;\n    },\n\n    /**\n     * Splits a number into a low and high value.\n     * @param {Number} bignum\n     * @private\n     */\n    split: function(bignum) {\n        if (typeof(bignum) == 'number') {\n            var hi = Math.floor(bignum / this.twoPow32);",443438,39,"o: Math.floor(bignum - hi * this.twoPow32),\n                hi: hi",1596368,41,"bignum;\n    }\n}, function() {\n    this.Global = new this({\n        id: 'uuid'",1419468,42,"\n * WebStorageProxy is simply a superclass for th",1370332,37,"LocalStorage} proxy. It uses the\n * new HTML5 key/value client-side storage objects to save {@link Ext.data.Model model instances} for offline us",1890816,35,"data.proxy.WebStorage",1469437,33,"Client",1375678,37,"WebStorageProxy',\n\n",1699029,49,888941,43,"The unique ID used as the key in which all record data are stored in the local storage object",921866,35,",\n\n        // WebStorage proxies dont use readers and writers",1086992,41,"hide",1479324,35,833774,39,"@hide\n         */\n        writer",1028096,47,1446886,38,"true if you want the webstorage proxy to comply\n         * to the paging params set on the store",1447037,42,"false,\n\n\t\tdefaultDateFormat: 'Y-m-d H:i:s.u'",1131376,36,"proxy, throws an error if local storage is not supported in the current brows",1372080,117,1882575,32,1418623,34,"cache\n         * Cached map of records already retrieved by this Proxy. Ensures that the same instance is always retrieved.\n         */\n        this.cache = {};\n\n        if (this.getStorageObject()",459292,34,"Logger.error(\"Local Storage is not supported in this browser, please use another type of data proxy\");\n        }",1644955,52,"if (!this.getId()) {\n            this.setId(model.modelName",1884720,62,"//inherit docs\n    create",1402892,49,1691066,50,"length ",1691296,35,"    = this.getIds(),\n            id, record, i;\n\n",1385201,33,228672,51,1347024,33,"if (!this.getModel().getIdentifier().isUnique) {",224541,33,"'Your identifier generation strategy for the model does not ensure unique id\\'s. Please use the UUID strategy, or implement your own identifier strategy with the flag isUnique.');\n\n            }\n",1553153,33,"\n            this.setRecord(record);\n",1587495,34,"}\n\n        this.setIds(ids);\n\n",1385086,42,1403199,36,1453790,72,"this, operation);\n        }",1377464,32,"read",1402892,49,"var records    = [],\n            ids        = this.getIds(),\n            model     ",1323439,32,1350147,48,"params     = operation.getParams() || {}",1456361,106,1456507,72,"            length     = i",1323481,32,", collection;\n\n        //read a single record\n        if (params",1351562,42,"record = this.getRecord(params[idProperty]);\n",1533376,42,"records.push(record);\n    ",1403187,39,890432,32,1821728,36,"ength",1691538,34,"this.getRecord(ids[i])",1533370,52,"records",1657238,33,"            }\n\n            collection",1262352,35,");\n\n            // First we comply to filters\n            if (filters && filters.length) {\n                collection.setFilters(filt",1010815,32,"// Then we comply to sorters\n            if (sorters && ",929510,34,"collection.set",1457808,32,"\n            collection.addAll(records);\n\n            if (this.getEnablePagingParams() && start !== undefined && limit",1587358,34,"records = collection.items.slice(start, start + limit",464704,40,"records = collection.items.slic",782128,32,"operation.setSuccessful();\n        }\n\n",1385086,34,"\n        operation.setResultSet(Ext.create('Ext.data.ResultSet', {\n",1398008,42,"total  : records.length,\n            loaded : true\n        }));\n        operation.setRecords(records);\n",1453781,81,"this, operation);\n        }",1377464,32,"update",1402892,49,1691066,50,"length ",1691296,35,"    = this.getIds(),\n            record, id, i;\n\n",1385201,33,228672,51,1347024,33,"this.setRecord(record);\n\n            //we need to update the set of ids here because it's possible that a non-phantom record was added\n            //to this proxy - in which case the record's id would never have been added via the normal 'create' call\n",1553153,45,"if (id !== undefined && ",1586096,52,"ids.push(id",541343,35,"this.setIds(ids);\n\n",1385086,42,1403199,36,1453790,72,"this, operation);\n        }\n    },\n\n    //inherit\n    destroy",1402892,49,1691066,50,"length ",1691296,35,"    = this.getIds(),\n\n            //newIds is a copy of ids, from which we remove the destroyed records\n            newIds  = [].concat(ids),\n            i;\n\n",1385201,33,228672,51,"Ext.Array.remove(newIds, records[i].getId());\n            this.removeRecord(records[i], ",773198,36,"ds(newIds);\n\n",1385086,42,1403199,36,1453790,72,"this, oper",1865104,41,"@private\n     * Fetches a model instance from the Proxy by ID. Runs each field's decode function (if present) to decode the data",1662638,32,"record's unique ID",1576398,37,"model instance or undefined if the record did not exist in the storage.\n     */\n    getRecord: function(id) {\n        if (this.cache[i",1663516,32,"var recordKey = this.getRecordKey(id),\n                item = this.getStorageObject().getItem(recordKey),\n                data    = {},\n                Model  ",1323439,32,"    fields  = Model",1560593,32,"    length  = fields.length,\n                i, field, name, record, rawData, rawValue;\n\n    ",1035748,33,"    return undefined;\n            }\n\n            rawData = Ext.decode(item)",913182,62,"field = fields[i];\n                name  = field.getName();\n\t\t\t\trawValue = rawData",138502,36,"field.getDecode()",1534782,38,"data[name] = field.getDecode()(rawV",648351,52,1374842,38,"\t\t\t\t\t\tdata[name] = this.readDate(field, rawValue",1519296,57,"ata[name] = rawV",465311,60,"\n            record = new Model(data, id);\n            this.cache[id] = record",789920,35,"che[id]",1573620,35,"given record in the Proxy. Runs each field's encode function (if present) to encode the data",1660064,33,"record The m",1583582,35,"} [id] The id to save the record under (defaults to the value of the record's getId() function)\n     */\n    setRecor",1552961,34,"if (id) {\n            record.setId(id",1292432,32,"id = record.getId(",1201088,49,"rawData = record.getData(),\n            data    = {},\n            Model  ",1341484,37," = Model",1560593,33,"ength  = field",1352392,41,"rawValue, field, name, obj, k",1352475,51,1562575,36," = field.getName();\n\t\t\trawValue = rawData[name];\n\n",1374656,34," === false",437038,44,"\n            if (typeof field.getEncode()",1534782,34,"data[name] = field.getEncode()(rawValue, rec",1109312,43,1374842,34," && Ext.isDate(rawValue)) {\n\t\t\t\t\tdata[name] = this.writeDate(field, rawV",648351,52,"data[name] = rawV",96096,57,"obj = me.getStorageObject();\n        key = me.getRecordKey(id);\n\n        //keep the cache up to date\n        me.cache[id] = record;\n\n        //iPad bug requires that we remove the item before setting it\n        obj.removeItem(key);\n        try {\n            obj.setItem(key, Ext.encode(data));\n        } catch(e)",1406192,48,"e);\n        }\n\n        record.commit(",330976,42,"Physically removes a given record from the local storage. Used internally\n     * by {@link #destroy}, which you should use instead because it updates the\n     * list of currently-stored record ids.\n     * @param {String/Number/Ext.data.Model} id The id of the record to remove,\n     * or an Ext.data.Model instance.\n     * @param {Boolean} [updateIds] False to skip saving the array of ids\n     * representing the set of all records in the Proxy.\n     */\n    removeRecord: function(id, updateId",1396735,40,"ids;\n\n        if (id.isModel) {\n            id = id.getId();\n        }\n\n        if (updateIds !== false) {\n            ids = me.getIds(",1292876,32,"ids, id);\n            me.setIds(ids);",885805,32,"cache[id];\n        me.getStorageObject().removeItem(me.getRecordKey(id)",330976,42,"Given the id of a record, returns a unique string based on that id and the id of this proxy. This is used when\n     * storing data in the local storage object and should prevent naming collisions.\n     * @param {String/Number/Ext.data.Model} id The record id, or a Model instance\n     * @return {String} The unique key for this record\n     */\n    getRecordKey: function(id) {\n        if (id.isModel) {\n            id = id.get",1057389,32,"Ext.String.format(\"{0}-{1}\", this.getId(), i",1579791,43,"Returns the array of record IDs stored in this Proxy\n     * @return {Number[]} The record IDs. Each is cast as a Number\n     */\n    getIds: function() {\n        var ids    = (this.getStorageObject().getItem(this.getId()) || \"\").split(\",\"),\n            length = id",512239,39,"ength == 1 && ids[0] === \"\") {\n            i",1349610,35,"id",1043200,41," Saves the array of ids representing the set of all records in the Proxy\n     * @param {Number[]} ids The ids to set\n     */\n    setIds: function(ids) {\n        var obj = this.getStorageObject(),\n            str = ids.join(\",\"),\n            id  = this.getId();\n\n        obj.removeItem(id);\n\n        if (!Ext.isEmpty(str)) {\n",274432,34,"obj.setItem(id, str);\n            } catch(e)",771276,34,"exception', this, e",1030640,35,"\t",1372802,35,"\t\tif (Ext.isEmpty(date)) {\n\t\t\treturn null;\n\t\t}\n\n\t\t",1372902,42,"this.getDefaultDateFormat();\n\t\tswitch (dateFormat) {\n\t\t\tcase 'timestamp':\n\t\t\t\treturn date.getTime() / 1000;\n\t\t\tcase 'time':\n\t\t\t\treturn date.getTime();\n\t\t\tdefault:\n\t\t\t\t",1373162,42,"\t\t}\n\t},\n\n\treadDate: function(field, date) {\n\t\tif (Ext.isEmpty(date)) {\n\t\t\treturn null;\n\t\t}\n\n\t\t",1372902,42,"this.getDefaultDateFormat();\n\t\tswitch (dateFormat) {\n\t\t\tcase 'timestamp':\n\t\t\t\treturn new Date(date * 1000);\n\t\t\tcase 'time':\n\t\t\t\treturn new Date(date)",625039,46,"Ext.isDate(date) ? date : Ext.Date.parse(date, dateFormat);\n\t\t}\n\t",563920,35,"Sets up the Proxy by claiming the key in the storage object that corresponds to the unique id of this Proxy. Called\n     * automatically by the constructor, this should not need to be called again unless {@link #clear} has been called",1217423,47,996560,36,"var storageObject = this.getStorageObject();\n        try {\n            storageObject.setItem(this.getId(), storageObject.getItem(this.getId()) || \"\");\n        } catch(e)",1406192,48,813743,37,"Destroys all records stored in the proxy and removes all keys and values used to support the proxy from the\n     * storage object",488880,42,"var obj = this.getStorageObject(),\n            ids = this.getIds(),\n            len = id",512239,34,"//remove all the records",485768,49,"this.removeRecord(ids[i], false);\n        }\n\n        //remove the supporting objects\n        obj.removeItem(this.getId()",330976,42,"Abstract function which should return the storage object that data will be saved to. This must be implemented\n     * in each subclass.\n     * @return {Object} The storage object\n     */\n    getStorageObjec",1459855,46,"getStorageObject function has not been defined in your Ext.data.proxy.WebStorage subclass\"",1328624,42," @aside guide proxies\n *\n * The LocalStorageProxy uses the new HTML5 localStorage API to sav",1356463,32,"ata locally on the\n * client browser. HTML5 localStorage is a key-value store (e.g. cannot save complex objects like JSON), so\n * LocalStorageProxy automatically serializes and deserializes data when saving and retrieving it.\n *\n * localStorage is extremely useful for saving user-specific information without needing to build server-side\n * infrastructure to support it. Let's imagine we're writing a Twitter search application and want to save the user's\n * searches locally so they can easily perform a saved search again later. We'd start by creating a Search model",1496901,117,"'id', 'query",1545038,54,"localstorage',\n *                 id  : 'twitter-Searches'",1329632,48,"Our Search model contains just two fields - id and query - plus a Proxy definition. The only configuration we need to\n * pass to the LocalStorage proxy is an {@link #id}. This is important as it separates the Model data in this Proxy from\n * all others. The localStorage API puts all data into a single shared namespace, so by setting an id we enable\n * LocalStorageProxy to manage the saved Search data.\n *\n * Saving our data into localStorage is easy and would usually be done with",1547103,43,"//our Store automatically picks up the LocalStorageProxy defined on the Search model",1697792,41,"Store', {\n *         model: \"Search\"\n *     });\n *\n *     //loads any existing Search data from localStorage\n *     store.load();\n *\n *     //now add some Searches\n *     store.add({query: 'Sencha Touch'});\n *     store.add({query: 'Ext JS'});\n *\n *     //finally, save our Search data to localStorage\n *     store.sync();\n *\n * The LocalStorageProxy automatically gives our new Searches an id when we call store.sync(). It encodes the Model data\n * and places it into localStorage. We can also save directly to localStorage, bypassing the Store altogether:\n *\n *     var search = Ext.create('Search', {query: 'Sencha Animator'});\n *\n *     //uses the configured LocalStorageProxy to save the new Search to localStorage\n *     search.save();\n *\n * # Limitations\n *\n * If this proxy is used in a browser where local storage is not supported, the constructor will throw an error. A local\n * storage proxy requires a unique ID which is used as a key in which all record data are stored in the local storage\n * object.\n *\n * It's important to supply this unique ID as it cannot be reliably determined otherwise. If no id is provided but the\n * attached store has a storeId, the storeId will be used. If neither option is presented the proxy will throw an error.",1399835,32,"LocalStorage",1469437,33,"WebStorage',\n    alias: 'proxy.localstorage",1375678,37,"LocalStorageProxy',\n\n    //inherit docs\n    getStorageObjec",1854206,38,"localStorage",1539616,43,1705192,2374,1380143,44,"reader.Xml\n * @extends Ext.data.reader.Reader\n *\n * The XML",1355775,74,"XML format. This usually\n * happens",1355885,399,"xml",1356288,54,"xml',\n *                 record: 'user'",1329632,48,1356395,113,"\n * not",1356515,67,"XML",1356586,69,"\n *",1620939,36,"that we want a XML",1356713,156,"xml'",1401952,39,"record: 'u",1356896,142,"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n *     <users>\n *          <user>\n *              <id>1</id>\n *              <name>Ed Spencer</name>\n *              <email>ed@sencha.com</email>\n *          </user>\n *          <user>\n *              <id>2</id>\n *              <name>Abe Elias</name>\n *              <email>abe@sencha.com</email>\n *          </user>\n *      </users>\n *\n * The XML Reader uses the configured {@link #record} option to pull out the data for each record - in this case we\n * set record to 'user', so each `<user>` above will be converted into a User model.\n *\n * ## Reading other XML",1357331,40,"XML",1357375,82,"\n * pass Xml",1357470,189,"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n *     <users>\n *         <user>\n *             <id>1</id>\n *             <name>Ed Spencer</name>\n *             <email>ed@sencha.com</email>\n *         </user>\n *         <user>\n *             <id>2</id>\n *             <name>Abe Elias</name>\n *             <email>abe@sencha.com</email>\n *         </user>\n *     </users>",1357989,145,"xml",1359099,78,"Note that XmlReader doesn't care whether your {@link #rootProperty} and {@link #record} elements are nested deep\n * inside a larger structure, so a response like this will still work:\n *\n *     <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n *     <deeply>\n *         <nested>\n *             <xml>\n *                 <users>\n *                     <user>\n *                         <id>1</id>\n *                         <name>Ed Spencer</name>\n *                         <email>ed@sencha.com</email>\n *                     </user>\n *                     <user>\n *                         <id>2</id>\n *                         <name>Abe Elias</name>\n *                         <email>abe@sencha.com</email>\n *                     </user>\n *                 </users>\n *             </xml>\n *         </nested>\n *     </deeply>\n *\n * ## Response metad",1359194,32,"additional data in its response, such as the {@link #totalProperty total number of records}\n * and the {@link #successProperty success status of the response}. These are typically included in the XML response\n * like this:\n *\n *     <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n *     <users>\n *         <total>100</total>\n *         <success>true</success>\n *         <user>\n *             <id>1</id>\n *             <name>Ed Spencer</name>\n *             <email>ed@sencha.com</email>\n *         </user>\n *         <user>\n *             <id>2</id>\n *             <name>Abe Elias</name>\n *             <email>abe@sencha.com</email>\n *         </user>\n *     </users>\n *\n * If these properties are present in the XML response they can be parsed out by the XmlReader and used by the\n * Store that loaded it. We can set up the names of these properties by specifying a final pair of configuration\n * option",1359054,41,"xml",1358138,35,",\n *         totalProperty  ",1360493,48,"\n *     }\n *\n * These final options are not necessary to make the Reader work, but can be useful when the server needs to report\n * an error or if it needs to indicate that there is a lot of data available of which only a subset is currently being\n * returned.\n *\n * ## Response format\n *\n * __Note:__ In order for the browser to parse a returned XML document, the Content-Type header in the HTTP\n * response must be set to \"text/xml\" or \"application/xml\". This is very important - the XmlReader will not\n * work correctly otherwise",1706304,34,"Xml",1706343,34,"Read",1375676,39,"XmlReader',\n    alias: 'reader.xml",1164976,47,"String} record The DomQuery path to the repeated element which contains record",1336704,34,"record: null",890480,51,"unction to return some particular key of data from a response. The {@link #totalProperty} and\n     * {@link #successProperty} are treated as special cases for type casting, everything else is just a",476320,33,"String} expr",542535,45,"Accessor: function(expr",1091024,40,1367912,33,"return Ext.emptyFn;\n        }\n\n",1367987,48,"return expr",107627,37,"root) {\n            return me.getNodeValue(Ext.DomQuery.selectNode(expr, root));\n        };\n    },\n\n    getNodeValu",303803,45,"firstChild) {\n            return node.firstChild.nodeValue;",564328,42,",\n\n    //inherit docs",1363805,51,"// Check to see if the response is already an xml node.\n        if (response.nodeType === 1 || response.nodeType === 9) {\n            return response;\n        }\n\n        var xml = response.responseXML;\n\n        if (!xml) {",1832846,33,1364334,365,"XML data not found in the response",1364975,34,"XML data not found in the response');\n        }\n\n        return xml",422288,36,"the data",1123104,32,"data The raw data",1689117,33,"Returns the `documentElement` property of the data object if present, or the same object if not.",1345215,58,".documentElement || data",1254144,42,"iven an XML object, returns the Element that represents the roo",1345850,32,"meta data",1346032,34,"XML data object.\n     * @return {XMLElement} The root node element.",1365870,51,"nodeName = data.nodeName,\n            root = this.getRootProperty();\n\n        if (!root || (nodeName && nodeName == root))",1366536,37," else if (Ext.DomQuery.isXml(data)) {\n            // This fix ensures we have XML data\n            // Related to TreeStore calling getRoot with the root node, which isn't XML\n            // Probably should be resolved in TreeStore at some point\n    ",474756,34,"Node(root, data",813744,38,1366599,89,"nodes we want.\n     * @param {XMLElement} root The XML root node",1694576,40,"records.",1366937,84,";\n\n        if (!recordName",795551,33,"'Record is a required parameter');\n        }\n\n        if (recordName != root.nodeName && recordName !== root.localName) {\n            root = Ext.DomQuery.select(recordName, ",1365295,36,"root = [root]",1372729,32,"callParent([root]",330976,42,"See {@link Ext.data.reader.Reader#getAssociatedDataRoot} docs",1346032,34,"raw data",660062,33,1353216,65,1330198,39,"#associationKey} if present).\n     * @return {XMLElement} The root.",1353340,78,"return Ext.DomQuery.select(associationName, data)[0]",597840,32,"an XML document and returns a ResultSet containing the model instances.\n     * @param {Object} doc Parsed XML doc",1576392,32,"ResultSet} The parsed result set.",1347905,36,"oc) {\n        //it's possible that we get passed an array here by associations. Make sure we strip that out (see Ext.data.reader.Reader#readAssociated)\n        if (Ext.isArray(doc)) {\n            doc = doc[0]",1372729,32,"callParent([doc]",330976,42,1706681,60,"XML element",1706746,111,"\n     * This is used by `buildExtractors`",1368731,184,"selector = field.getMapping() ||",1369066,36,492510,33,1369146,102," else {\n",1153786,32,"split('@');\n\n            if (selector.length === 2 && selector[0]) {\n                result = 'me.getNodeValue(Ext.DomQuery.selectNode(\"@' + selector[1] + '\", Ext.DomQuery.selectNode(\"' + selector[0] + '\", ' + dataName + ')))';\n            } else if (selector",141582,33,"result = 'me.getNodeValue(Ext.DomQuery.selectNode(\"@' + selector[1] + '\", ' + dataName + '))';\n            } else if (selector",260010,33,"result = 'me.getNodeValue(Ext.DomQuery.selectNode(\"' + selector[0] + '\", ' + dataName + '))'",343120,39,"throw \"Unsupported query - too many queries for attributes in \" + selector.join('@",1325936,32,1369701,37,"Tracks what records are currently selected in a databound widget. This class is mixed in to {@link Ext.dataview.DataView} and\n * all subclasse",514048,41,"Select",801582,73,"select",517309,36,"updateStore: 'updateStore'",1033200,35,"event beforeselectionchange\n     * Fires before an item is selected.\n     * @param {Ext.mixin.Selectable} this\n     * @preventable selectionchange",247535,33,"listen to the {@link #selectionchange} event with an order of `before` instead",1382496,33,"selectionchange\n     * Fires when a selection changes.\n     * @param {Ext.mixin.Selectable} this",1653853,42,"The records whose selection has changed",1281680,33,948093,37,"Selection `true` to disable selection",1442531,32,"will lock the selection model that the DataView use",1098336,44,"disableSele",1216112,38,"cfg {String} mode\n         * Modes of selection.\n         * Valid values are `'SINGLE'`, `'SIMPLE'`, and `'MULTI'",518336,44,"mode: 'SINGLE",1013520,42,"allowDeselect\n         * Allow users to deselect a record in a DataView, List or Grid. Only applicable when the Selectable's `mode` is\n         * `'SINGLE'",518336,44,"allowDeselect",888447,39,"Ext.data.Model} lastSelected",180816,33,"accessor\n         */\n        lastSelected",1314560,42,"data.Model} lastFocused",180816,33,"accessor\n         */\n        lastFocused",1028096,47,"deselectOnContainerClick `true` to deselect current selection when the container body is\n         * click",1028046,45,"deselectOnContainerClick: true\n    },\n\n    modes: {\n        SINGLE: true,\n        SIMPLE: true,\n        MULTI: true\n    },\n\n    selectableEventHooks: {\n        addrecords: 'onSelectionStoreAdd',\n        removerecords: 'onSelectionStoreRemove',\n        updaterecord: 'onSelectionStoreUpdate',\n        load: 'refreshSelection',\n        refresh: 'refreshSelection",996512,53,"selected",1290576,40,867231,35,782560,45,"Mode: function(mode) {\n        mode = mode ? mode.toUpperCase() : 'SINGLE';\n        // set to mode specified unless it doesnt exist, in that case\n        // use single.\n        return this.modes[mode] ? mode : 'SINGLE'",958816,46,"updateStore: function(newStore, oldStor",1452352,40,"bindEvents = Ext.apply({}, me.selectableEventHooks, { scope: me });\n\n        if (oldStore && Ext.isObject(oldStore) && oldStore.isStore) {\n            if (oldStore.autoDestroy) {\n                oldStore",1658620,43,"{\n                oldStore.un(bindEvents);\n                if(newStore) {\n                    newStore.un('clear', 'onSelectionStoreClear'",541614,60,"if (newStore) {\n            newStore.on(bindEvents);\n            newStore.onBefore('clear', 'onSelectionStoreClear', this);\n            me.refreshSelection",1560128,37,"Selects all records",1203662,33,"`true` to suppress all select events.\n     */\n    select",1657881,32,"var me = this,\n            selections = me.getStore().getRange();\n\n        me.select(selections, true, silent);\n    },\n\n    /**\n     * Deselects all records.\n     */\n    deselectAll: function(supres",1396735,40,"selections = me.getStore().getRange();\n\n        me.deselect(selections, supress);\n\n        me.selected.clear();\n        me.setLastSelected(null);\n        me.setLastFocused(null);\n    },\n\n    // Provides differentiation of logic between MULTI, SIMPLE and SINGLE\n    // selection modes.\n    selectWithEven",1664479,34,"me = this,\n            isSelected = me.isSelected(record);\n        switch (me.getMode()) {\n            case 'MULTI':\n            case 'SIMPLE':\n                if (isSelected) {\n                    me.deselect(recor",409040,34,929085,35,"elect(record, tru",1140160,34,"    break;\n            case 'SINGLE':\n                if (me.getAllowDeselect() && isSelected) {\n                    // if allowDeselect is on and this record isSelected, deselect it\n                    me.deselect(record",1115104,48,"// select the record and do NOT maintain existing selections\n                    me.select(record",341052,40,"    break",110528,35,"Selects a range of rows if the selection model {@link Ext.mixin.Selectable#getDisableSelection} is not locked.\n     * All rows in between `startRecord` and `endRecord` are also selected.\n     * @param {Number} startRecord The index of the first row in the range.\n     * @param {Number} endRecord The index of the last row in the range.\n     * @param {Boolean} [keepExisting] `true` to retain existing selections.\n     */\n    selectRange: function(startRecord, endRecord, keepExisting",288192,39,"store = me.getStore()",1350037,40,"tmp, i;\n\n        if (me.getDisableSelection(",967184,44,"// swap values\n        if (startRecord > endRecord) {\n            tmp = endRecord;\n            endRecord = startRecord;\n            startRecord = tmp;\n        }\n\n        for (i = startRecord; i <= endRecord; i++) {\n            records.push(store.getAt(i));\n        }\n        this.doMultiSelect(records, keepExisting)",446037,40,"records to the currently selected set",1655876,32,"Array/Number} records The records to select.\n     * @param {Boolean} keepExisting If `true`, the existing selection will be added to (if not, the old selection is replaced).\n     * @param {Boolean} suppressEvent If `true`, the `select` event will not be fir",377568,33,"records, keepExisting, suppressEvent",288192,39,"record;\n\n        if (me.getDisableSelection(",967184,44,"if (typeof records === \"number\") {\n            records = [me.getStore().getAt(records)];\n        }\n\n        if (!records",1758959,43,"if (me.getMode() == \"SINGLE\" && records",1505935,32,".length ? records[0] : records;\n            me.doSingleSelect(record, suppressEvent",1292432,32,"me.doMultiSelect(records, keepExisting, suppressEven",1373200,37,"Selects a single",1560479,37,"doSingleSelect: function(record, suppressEvent",288192,39,"selected = me.selected;\n\n        if (me.getDisableSelection(",967184,44,"// already selected.\n        // should we also check beforeselect?\n        if (me.isSelected(record",967184,44,"if (selected.getCount() > 0) {\n            me.deselect(me.getLastSelected(), suppressEvent);\n        }\n\n        selected.add(record);\n        me.setLastSelected(record);\n        me.onItemSelect(record, suppressEvent);\n        me.setLastFocused(record);\n\n        if (!suppressEvent) {\n            me.fireSelectionChange([record]",1172128,37,"elects a set of multiple records.\n     * @private\n     */\n    doMultiSelect: function(records, keepExisting, suppressEvent) {\n        if (records === null || this.getDisableSelection(",967184,35,"        records = !Ext.isArray(records) ? [records] : records;",1656096,38,"elected = me.selected",1658350,47,"change",1656137,41,"record;\n\n        if (!keepExisting && selected.getCount() > 0) {\n            change = true;\n            me.deselect(me.getSelection(), true);\n        }\n",61168,42,1347024,33,"if (keepExisting && me.isSelected(record",437037,57,"change = true;\n            me.setLastSelected(record);\n            selected.add(record);\n            if (!suppressEvent) {\n                me.setLastFocused(",913421,36,"me.onItemSelect(record, suppressEvent);\n        }\n        if (change && !",1675206,34,"fireSelectionChange(record",764352,37,"Deselects the given record(s). If many records are currently selected, it will only deselect those you pass in.\n     * @param {Number/Array/Ext.data.Model} records The record(s) to deselect. Can also be a number to reference by index.\n     * @param {Boolean} suppressEvent If `true` the `deselect` event will not be fired.\n     */\n    deselect: function(records, suppress",1091019,45,"me.getDisableSelection(",967184,44,"records = Ext.isArray(records) ? records : [records];\n\n        var selected = me.selected,\n            change   = false,\n            i        = 0,\n            store    = me.getStore(),\n            l",1372563,38,"record;\n\n",61168,42,1656552,38,"typeof record === 'number') {\n                record = store.getAt(",913421,36,"if (selected.remove(record)) {\n                if (me.getLastSelected() == record) {\n                    me.setLastSelected(selected.last()",320272,37,"change",1729807,35,"if (record) {\n                me.onItemDeselect(record, suppressEvent",699072,40,"change && !suppressEvent) {\n            me.fireSelectionChange(record",764352,37,"Sets a record as the last focused record. This does NOT mean\n     * that the record has been selected.\n     * @param {Ext.data.Record} newRecord\n     * @param {Ext.data.Record} oldRecord\n     */\n    updateLastFocuse",783747,44,"this.onLastFocusChanged(oldRecord, newRecord);\n    },\n\n    fireSelectionChange: function(records",651756,35,"    me.fireAction('selectionchange', [me, records], 'getSelection'",1049488,35,"n array of the currently selected records.\n",76384,32,"of selected records.\n     */\n    getSelec",1321246,39,"selected.getRange(",1049488,34,"`true` if the specified row is select",1352122,33,"/Number} record The record or index of the record",470719,35,"\n     */\n    isSelected: function(record) {\n        record = Ext.isNumber(record) ? this.getStore().getAt(record) : record;\n        return this.selected.indexOf(record) !== -1",413600,45,"ere is a selected recor",1675725,40,"hasSelec",1321246,39,"selected.getCount() > 0",958816,53,"Selec",957936,32,"e = this,\n            selections = me.getSelection();\n\n        me.deselectAll(true);\n        if (selections.length) {\n            me.select(selections, false",813738,32,"/ prune records from the SelectionModel if\n    // they were selected at the time they were\n    // removed.\n    onSelectionStoreRemove",1506111,41,"me = this,\n            selected = me.selected",1658350,47,"record, i;\n\n        if (me.getDisableSelection(",967184,44,499296,39,1347024,33,"if (selected.remove(record)) {\n                if (me.getLastSelected() == record) {\n                    me.setLastSelected(null",320272,37,"if (me.getLastFocused() == record) {\n                    me.setLastFocused(null",320272,37,"me.fireSelectionChange([record",1642800,40,"onSelectionStoreClear: function(store) {\n        var records = store.getData().items;\n        this.onSelectionStoreRemove(store",1653611,35,"Returns the number of selections",482796,41,"Selection",557516,40,"selected.getCount();\n    },\n\n    onSelectionStoreAdd: Ext.emptyFn,\n    onSelectionStoreUpdate: Ext.emptyFn,\n    onItemSelect: Ext.emptyFn,\n    onItemDeselect: Ext.emptyFn,\n    onLastFocusChanged: Ext.emptyFn,\n    onEditorKey: Ext.emptyFn",353068,32,"Selects a record instance by record instance or index.\n     * @member Ext.mixin.Selectable\n     * @method doSel",1622286,33,"/Number} records An array of records or an index.\n     * @param {Boolean} keepExisting\n     * @param {Boolean} suppressEvent Set to `false` to not fire a select event",247534,45,"#select}",1623764,34,"Deselects a record instance by record instance or index.\n     * @member Ext.mixin.Selectable\n     * @method doDesel",1622286,33,"/Number} records An array of records or an index.\n     * @param {Boolean} suppressEvent Set to `false` to not fire a deselect event",247534,45,"#deselect}",1623764,34,"Returns the selection mode currently used by this Selectable.\n     * @member Ext.mixin.Selectable\n     * @method getSelectionMode",462724,37,"mode",247534,45,"#getMode}",1623764,34,"Returns the array of previously selected items.\n     * @member Ext.mixin.Selectable\n     * @method getLastSelected\n     * @return {Array} The previous selection",362359,33,"/",1684479,40,"electable is currently locked.\n     * @member Ext.mixin.Selectable\n     * @method isLocked",539351,34,"currently locked",247535,44,"#getDisableSelection}",1623764,34,"This was an internal function accidentally exposed in 1.x and now deprecated. Calling it has no effect\n     * @member Ext.mixin.Selectable\n     * @method setLastFocused",362360,32,"/\n\n    /**\n     * Deselects any currently selected records and clears all stored selections.\n     * @member Ext.mixin.Selectable\n     * @method clearSelections",247535,44,"#deselectAll}",1623764,34,"Returns the number of selections.\n     * @member Ext.mixin.Selectable\n     * @method getCount",1597032,33,76800,35,"#getSelectionCount}",1623764,35,"cfg {Boolean} locked\n     * @inheritdoc Ext.mixin.Selectable#disableSelection",247535,44,"#disableSelection} instead.\n     */\n});\n\n/**\n * A DataItem is a container for records inside of {@link Ext.dataview.DataView} with useComponents: true.\n * It ties together {@link Ext.data.Model records} to its contained Components. Consider the following example:\n *\n *      @example phone portrait preview\n *     // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! MODEL\n *\n *     Ext.define('TestModel",1419872,87,"{\n *                 name: 'val1'",254928,40,"name: 'val2",255021,32,"\n *     });\n *\n *     // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! STORE\n *\n *     Ext.define('TestStor",1407664,35,"Store",1614815,39,"data: [{\n *                 val1: 'A Button',\n *                 val2: 'with text'",254928,40,"val1: 'The Button',\n *                 val2: 'more text'",254928,40,"val1: 'My Button',\n *                 val2: 'My Text'\n *             }],\n *             model: 'TestModel',\n *             storeId: 'TestStore'",1331408,35,"// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! DATA ITEM\n *\n *     Ext.define('MyDataItem",1419872,33,"view.component.DataItem',\n *         alias: 'widget.mydataitem",1614815,39,"padding: 10,\n *    ",1078240,34,"    type: 'hbox",1166432,35,"defaults: {\n *    ",1078201,34,"    }",254693,46,1076937,32,"    text: 'Val1'",254928,40,297101,39,721083,35,"val2',\n *                 itemId: 'textCmp",255021,32,",\n *         updateRecord: function(record) {\n *             var me = this;\n *\n *             me.down('button').setText(record.get('val1'));\n *             me.down('#textCmp').setHtml(record.get('val2'));\n *\n *     ",1365192,34,516591,34,"// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! DATA VIEW\n *\n *     Ext.define('MyDataView",1419872,33,"view.DataView",1614815,39,"defaultType: 'mydataitem',\n *             useComponents: tru",1134720,32,"    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! RUN\n *\n *     Ext.create('MyDataView",1166158,45,"store: Ext.create('TestStore')\n *     });\n *\n * Another way to accomplish this is via a {@link #dataMap dataMap} configuration.\n *\n * For example, lets say you have a `text` configuration which, when applied, gets turned into an instance of an\n * Ext.Component. We want to update the {@link #html} of a sub-component when the 'text' field of the record gets\n * changed.\n *\n * As you can see below, it is simply a matter of setting the key of the object to be the getter of the config\n * (getText), and then give that property a value of an object, which then has 'setHtml' (the html setter) as the key,\n * and 'text' (the field name) as the value. You can continue this for a as many sub-components as you wish.\n *\n *     dataMap: {\n *         // When the record is updated, get the text configuration, and\n *         // call {@link #setHtml} with the 'text' field of the record.\n *         getText: {\n *             setHtml: 'text'\n *         },\n *\n *         // When the record is updated, get the userName configuration, and\n *         // call {@link #setHtml} with the 'from_user' field of the record.\n *         getUserName: {\n *             setHtml: 'from_user'\n *         },\n *\n *         // When the record is updated, get the avatar configuration, and\n *         // call `setSrc` with the 'profile_image_url' field of the record.\n *         getAvatar: {\n *             setSrc: 'profile_image_url'\n *         }\n *     }\n */\n\nExt.define('Ext.dataview.component.DataItem",1168796,47,"dataitem',",990606,33,"Ext.baseCSSPrefix + 'data-item',\n\n        defaultType: 'componen",1445648,34,1663008,42,"of this DataItem. It is controlled by the Component DataView",740976,43,1363212,44,"String} itemCls\n         * An additional CSS class to apply to items within the DataView",740976,43,"item",1244496,40,"dataMap\n         * The dataMap allows you to map {@link #record} fields to specific configurations in this c",746334,32,"For example, lets say you have a `text` configuration which, when applied, gets turned into an instance of an Ext.Component.\n         * We want to update the {@link #html} of this component when the 'text' field of the record gets changed",1371081,52," dataMap: {\n         *          getText: {\n         *              setHtml: 'text'",240447,40,"\n         *\n         * In this example, it is simply a matter of setting the key of the object to be the getter of the config (`getText`), and then give that\n         * property a value of an object, which then has `setHtml` (the html setter) as the key, and `text` (the field name) as",921365,32,"dataMap: {},\n\n        /*\n         * @private dataview\n         */\n        dataview: null,\n",1842333,33,"items: [{\n            xtype: 'component'\n        }]",758036,84,";\n",933760,39,"},\n\n    updateItemCls: function(newCls, oldCls) {\n        if (oldCl",452214,32,"oldCls);\n        }\n        if (newCls) {\n            this.addCls(newCls);\n        }\n    },\n\n    doMapData: function(dataMap, data, item) {\n        var componentName, component, setterMap, setterName;\n\n        for (componentName in dataMap) {\n            setterMap = dataMap[componentName];\n            component = this[componentName]();\n    ",1721065,37,"    for (setterName in setterMap) {\n                    if (data && component[setterName] && data[setterMap[setterName]] !== undefined && data[setterMap[setterName]] !",90976,35,"component[setterName](data[setterMap[setterName]]",605504,57,"        }",1043118,34,"// Bypassing setter because sometimes we pass the same object (different properties)\n            item.updateData(data",111856,36,"Updates this container's child items, passing through the `dataMap`",1660064,33,"newR",1666030,34,783736,32,") {",783876,39,"return;\n        }\n        this._record = newRecord;",1656096,37,"dataview = me.dataview || this.getDataview(),\n            data = dataview.prepareData(newRecord.getData(true), dataview.getStore().indexOf(newRecord), newRecord)",1038784,50,"tem = items.first(),\n            dataMap = me.getDataMap();\n",1035747,34,"return;\n        }\n        if (dataMap) {\n            this.doMapData(dataMap, data, ite",410398,38,"@event updatedata\n",783295,42,"DataItem is upda",1100073,32,"view.component.DataItem} this The DataItem insta",17075,32,"newData The new data.\n         */\n        me.fireEvent('updatedata', me, data",855998,50,"dataview.componen",1018815,35,1018896,50,865037,43,"event itemtouchstart",1020014,34,"touched\n     * @param {Ext.dataview.component.Container} this\n     * @param {Ext.dataview.component.DataItem} item The item touched",1308815,51," touched",1082749,51,749952,33,"temtouchmov",1020013,35,"moved\n     * @param {Ext.dataview.component.Container} this\n     * @param {Ext.dataview.component.DataItem} item The item moved",1308815,51," moved",1082749,51,749952,33,"temtouchend",1020014,34,"touched\n     * @param {Ext.dataview.component.Container} this\n     * @param {Ext.dataview.component.DataItem} item The item touched",1308815,51," touched",1082749,51,749952,33,"temtap",1020014,34,"tapped\n     * @param {Ext.dataview.component.Container} this\n     * @param {Ext.dataview.component.DataItem} item The item tapped",1308815,51," tapped",1082749,51,749952,33,"temtaphold",1020014,34,"tapped\n     * @param {Ext.dataview.component.Container} this\n     * @param {Ext.dataview.component.DataItem} item The item tapped",1308815,51," tapped",1082749,51,749952,33,"temsingletap",1020014,34,"doubletapped\n     * @param {Ext.dataview.component.Container} this\n     * @param {Ext.dataview.component.DataItem} item The item singletapped",1308815,51," singletapped",1082749,51,749952,33,"temdoubletap",1020014,34,"doubletapped\n     * @param {Ext.dataview.component.Container} this\n     * @param {Ext.dataview.component.DataItem} item The item doubletapped",1308815,51," doubletapped",1082749,51,749952,33,"temswip",1020013,35,"swiped\n     * @param {Ext.dataview.component.Container} this\n     * @param {Ext.dataview.component.DataItem} item The item swiped",1308815,51," swiped",1082749,51,410144,36,") {\n        this.itemCache = [];",1008975,49,"//@private\n    doI",1217438,32,"this.innerElement.on({\n            touchstart: 'onItem",952050,38,"ItemTouchEnd',\n            tap: 'onItemTap',\n            taphold: 'onItemTapHold',\n            touchmove: 'onItemTouchMove',\n            singletap: 'onItemSingleTap',\n            doubletap: 'onItemDoubleTap',\n            swipe: 'onItemSwipe',\n            delegate: '> .' + Ext.baseCSSPrefix + 'data-item',\n",712654,32,"});\n    },\n\n    //@private",1217432,38,"this.callParent();\n        this.doInitialize();\n    },\n\n    onItem",1807934,34,1774792,38,"getTarget(),\n            item = Ext.getCmp(target.id);\n\n        item.on({\n            touchmove: 'onItemTouchMove',\n            scope   : me,\n",779440,33,"});\n\n        me.fireEvent('itemtouchstart', me, item, me.indexOf(item), e);\n    },\n\n    onItem",1794320,37,1774796,34,"getTarget(),\n            item = Ext.getCmp(target.id);\n        me.fireEvent('itemtouchmove', me, item, me.indexOf(item), e);\n    },\n\n    onItem",1787839,32,1774792,38,"getTarget(),\n            item = Ext.getCmp(target.id);\n\n        item.un({\n            touchmove: 'onItemTouchMove',\n            scope   : me\n        });\n\n        me.fireEvent('itemtouchend', me, item, me.indexOf(item), e);\n    },\n\n    onItemTap",1774768,62,"getTarget(),\n            item = Ext.getCmp(target.id);\n        me.fireEvent('itemtap', me, item, me.indexOf(item), e);\n    },\n\n    onItemTapHol",1774767,63,"getTarget(),\n            item = Ext.getCmp(target.id);\n        me.fireEvent('itemtaphold', me, item, me.indexOf(item), e);\n    },\n\n    onItemSingleTap",1774768,62,"getTarget(),\n            item = Ext.getCmp(target.id);\n        me.fireEvent('itemsingletap', me, item, me.indexOf(item), e);\n    },\n\n    onItemDoubleTap",1774768,62,"getTarget(),\n            item = Ext.getCmp(target.id);\n        me.fireEvent('itemdoubletap', me, item, me.indexOf(item), e);\n    },\n\n    onItem",1869136,33,1774796,34,"getTarget(),\n            item = Ext.getCmp(target.id);\n        me.fireEvent('itemswipe', me, item, me.indexOf(item), e);\n    },\n\n    moveItemsToCache: function(from, to",288192,40,"ataview = me.dataview,\n            maxItemCache = dataview.getMaxItemCache(),\n            items = me.getViewItems(),\n            itemCache = me.itemCache,\n            cacheLn = itemCache.length,\n            pressedCls = dataview.getPressedCls(),\n            selectedCls = dataview.getSelectedCls(),\n            i = to - from",899377,38,">= 0; i--) {\n            item = items[from + i];\n            if (cacheLn !== maxItemCache) {\n                me.remove(item, false);\n                item.removeCls([pressedCls, selectedCls]);\n                itemCache.push(item);\n                cacheLn++",101376,51,"item",1658620,34,"}\n\n        if (me.getViewItems().length == 0) {\n            this.dataview.showEmptyText();\n        }\n    },\n\n    moveItemsFromCache: function(records",288192,40,"ataview = me.dataview,\n            store = dataview.getStore",1323455,49,"xtype = dataview.getDefaultType(),\n            itemConfig = dataview.getItemConfig(),\n            itemCache = me.itemCache,\n            cacheLn = itemCache.length",293877,41,"item, record;\n\n        if (ln) {\n            dataview.hideEmptyText(",446879,32,1323534,35,"s[i]._tmpIndex = store.indexOf(records[i])",936318,36,"records, function(record1, record2) {\n            return record1._tmpIndex > record2._tmpIndex ? 1 : -1;\n        }",1563503,51,1347024,33,"if (cacheLn) {\n                cacheLn--;\n                item = itemCache.pop();\n                this.updateListItem(record, ite",755455,53,"item = me.getDataItemConfig(xtype, record, itemC",334715,34,"item = this.insert(record._tmpIndex, item);\n            delete record._tmpIndex;\n        }",1199568,35,"getViewItem",1752927,36,"getInnerItems();\n    },\n\n    updateListItem: function(record, item) {\n        if (item.updateRecord) {\n            if (item.getRecord() === record) {\n                item.updateRecord(rec",1109312,43,"item.setRecord",1654558,32,"}\n    },\n\n    getDataItemConfig: function(xtype, record, itemConfig) {\n        var dataview = this.dataview,\n            dataItemConfig = {\n                xtype: xtype,\n                record: record,\n                itemCls: dataview.getItemCls(),\n                defaults: itemConfig,\n                dataview: dataview\n            };\n        return Ext.merge(dataItemConfig, itemConfig);\n    },\n\n    doRemoveItemCls: function(cls",1049960,32,"ViewItems()",1041307,50,";\n\n",61168,42,"items[i].removeCls(cls);\n        }\n    },\n\n    doAddItemCls: function(cls",1049960,32,"ViewItems()",1041307,50,";\n\n",61168,42,"items[i].addCls(cls",1286570,32,"tNewIndex: function(oldIndex, newIndex, record) {\n        this.moveItemsToCache(oldIndex, oldIndex);\n        this.moveItemsFromCache([record]",974175,49,"me = this,\n            itemCache = me.itemCache,\n            ln = itemCache",1455854,49,"n; i++) {\n            itemCache[i]",1052415,35,"callParent(",855998,50,"dataview.elemen",1018815,50,"/**\n     * @event itemtouchstart",1020014,34,"touched\n     * @param {Ext.dataview.element.Container} this",485088,33,"item The item touched",1308815,51," touched",1082749,51,749952,33,"temtouchmov",1020013,35,"moved\n     * @param {Ext.dataview.element.Container} this",485088,33,"item The item moved",1308815,51," moved",1082749,51,749952,33,"temtouchend",1020014,34,"touched\n     * @param {Ext.dataview.element.Container} this",485088,33,"item The item touched",1308815,51," touched",1082749,51,749952,33,"temtap",1020014,34,"tapped\n     * @param {Ext.dataview.element.Container} this",485088,33,"item The item tapped",1308815,51," tapped",1082749,51,749952,33,"temtaphold",1020014,34,"tapped\n     * @param {Ext.dataview.element.Container} this",485088,33,"item The item tapped",1308815,51," tapped",1082749,51,749952,33,"temsingletap",1020014,34,"singletapped\n     * @param {Ext.dataview.element.Container} this",485088,33,"item The item singletapped",1308815,51," singletapped",1082749,51,749952,33,"temdoubletap",1020014,34,"doubletapped\n     * @param {Ext.dataview.element.Container} this",485088,33,"item The item doubletapped",1308815,51," doubletapped",1082749,51,749952,33,"temswip",1020013,35,"swiped\n     * @param {Ext.dataview.element.Container} this",485088,33,"item The item swiped",1308815,51," swiped",1082749,51,"\n     */\n\n    doI",1217438,32,"this.element.on({\n            touchstart: 'onItem",952050,38,"ItemTouchEnd',\n            tap: 'onItemTap',\n            taphold: 'onItemTapHold',\n            touchmove: 'onItemTouchMove',\n            singletap: 'onItemSingleTap',\n            doubletap: 'onItemDoubleTap',\n            swipe: 'onItemSwipe',\n            delegate: '> div',\n",712654,32,"});\n    },\n\n    //@private",1217432,38,"this.callParent();\n        this.doInitialize()",758035,85,";\n\n        me.callParent([newBaseCls + '-container', oldBaseCls]);\n    },\n\n    onItem",1807934,34,1774792,38,"getTarget(),\n            index = me.getViewItems().indexOf(target);\n\n        Ext.get(target).on({\n            touchmove: 'onItemTouchMove',\n            scope   : me,\n",779440,33,"});\n\n        me.fireEvent('itemtouchstart', me, Ext.get(target), index, e);\n    },\n\n    onItem",1787839,32,1774792,38,"getTarget(),\n            index = me.getViewItems().indexOf(target);\n\n        Ext.get(target).un({\n            touchmove: 'onItemTouchMove',\n            scope   : me\n        });\n\n        me.fireEvent('itemtouchend', me, Ext.get(target), index, e);\n    },\n\n    onItem",1794320,37,1774796,34,"getTarget(),\n            index = me.getViewItems().indexOf(target);\n\n        me.fireEvent('itemtouchmove', me, Ext.get(target), index, e);\n    },\n\n    onItemTap",1774768,62,"getTarget(),\n            index = me.getViewItems().indexOf(target);\n\n        me.fireEvent('itemtap', me, Ext.get(target), index, e);\n    },\n\n    onItemTapHol",1774767,32,"   ",1774798,32,"getTarget(),\n            index  = me.getViewItems().indexOf(target);\n\n        me.fireEvent('itemtaphold', me, Ext.get(target), index, e);\n    },\n\n    onItemDoubleTap",1774768,62,"getTarget(),\n            index = me.getViewItems().indexOf(target);\n\n        me.fireEvent('itemdoubletap', me, Ext.get(target), index, e);\n    },\n\n    onItemSingleTap",1774768,62,"getTarget(),\n            index = me.getViewItems().indexOf(target);\n\n        me.fireEvent('itemsingletap', me, Ext.get(target), index, e);\n    },\n\n    onItem",1869136,33,1774796,34,"getTarget(),\n            index = me.getViewItems().indexOf(target);\n\n        me.fireEvent('itemswipe', me,  Ext.get(target), index, e);\n    },\n\n    updateListItem: function(record, item",890664,45,"dataview = me.dataview,\n            store    = dataview.getStore(),\n            index    = store.indexOf(record),\n            data     = dataview.prepareData(record.getData(true), index, record);\n\n        data.xcount = store.getCount();\n        data.xindex = typeof data.xindex === 'number' ? data.xindex : index;\n\n        item.innerHTML = dataview.getItemTpl().apply(data);\n    },\n\n    addListItem: function(index, record) {\n        var me         = this,\n            dataview   = me.dataview,\n            store      = dataview.getStore(),\n            data       = dataview.prepareData(record.getData(true), index, record),\n            element    = me.element,\n            childNodes = element.dom.childNodes,\n            ln         = childNodes.length,\n            wrapElement;\n\n        data.xcount = typeof data.xcount === 'number' ? data.xcount : store.getCount();\n        data.xindex = typeof data.xindex === 'number' ? data.xindex : index;\n\n        wrap",551773,37,"ItemElementConfig(index, data));\n\n        if (!ln || index == ln) {\n            wrapElement.appendTo(element",1292432,32,"wrapElement.insertBefore(childNodes[index]",883561,32,"ElementConfig: function(index, data) {\n        var dataview = this.dataview,\n            itemCls = dataview.getItemCls(),\n            cls = dataview.getBaseCls() + '-item';\n\n        if (itemCls) {\n            cls += ' ' + itemCls;",1131271,40,"cls: cls,\n            html: dataview.getItemTpl().apply(data)\n        };\n    },\n\n    doRemoveItemCls: function(cl",483884,33,"getViewItems()",483925,48,"i = 0;\n\n",61168,42,"Ext.fly(elements[i]).removeCls(cls);\n        }\n    },\n\n    doAddItemCls: function(cl",483884,33,"getViewItems()",483925,48,"i = 0;\n\n",61168,42,"Ext.fly(elements[i]).addCls(cls);\n        }\n    },\n\n    // Remove\n    moveItemsToCache: function(from, to",288192,39,"items = me.getViewItems(),\n            i = to - from",899377,38,">= 0; i--) {\n            item = items[from + i];\n            Ext.get(item).destroy();\n        }\n        if (me.getViewItems().length == 0) {\n            this.dataview.showEmptyText();\n        }\n    },\n\n    // Add\n    moveItemsFromCache: function(records",288192,40,"ataview = me.dataview,\n            store = dataview.getStore",1323455,69,"if (ln) {\n            dataview.hideEmptyText(",446879,32,1323534,35,"s[i]._tmpIndex = store.indexOf(records[i])",936318,36,"records, function(record1, record2) {\n            return record1._tmpIndex > record2._tmpIndex ? 1 : -1;\n        }",1563503,51,1347024,33,"me.addListItem(record._tmpIndex, record);\n            delete record._tmpIndex;\n        }\n    },\n\n    // Transform ChildNodes into a proper Array so we can do indexOf...\n    getView",1049719,35,"Array.prototype.slice.call(this.element.dom.childNodes);\n    },\n\n    updateAtNewIndex: function(oldIndex, newIndex, record) {\n        this.moveItemsToCache(oldIndex, oldIndex);\n        this.moveItemsFromCache([record]",974175,56,"s = this.getViewItems()",483925,48,"i = 0;\n\n",61168,42,"Ext.get(elements[i])",1052415,35,"callParent",1068414,35,"dataview\n *\n * DataView makes it easy to create lots of components dynamically, usually based off",1460550,36,"It's great for rendering lots of data from your server backend or any other data source and is what powers\n * components like {@link Ext.List}.\n *\n * Use DataView whenever you want to show sets of the same component many times, for examples in apps like these:\n *\n * - List of messages in an email app\n * - Showing latest news/tweets\n * - Tiled set of albums in an HTML5 music player\n *\n * # Creating a Simple DataView\n *\n * At its simplest, a DataView is just a Store full of data and a simple template that we use to render each item",1078016,46,"var touchTeam = Ext.create('Ext.DataView",1166158,45,"store: {\n *             fields: ['name', 'age'],\n *    ",919704,32,"    {name: 'Jamie',  age: 100},\n *                 {name: 'Rob',   age: 21},\n *                 {name: 'Tommy', age: 24},\n *                 {name: 'Jacky', age: 24},\n *                 {name: 'Ed',   age: 26}",1332094,34,"\n *         itemTpl: '<div>{name} is {age} years old</div>'\n *     });\n *\n * Here we just defined everything inline so it's all local with nothing being loaded from a server. For each of the 5\n * data items defined in our Store, DataView will render a",1015179,32," and pass in the name and age\n * data. The component will use the tpl we provided above, rendering the data in the curly bracket placeholders we\n * provided.\n *\n * Because DataView is integrated with Store, any changes to the Store are immediately reflected on the screen. For\n * example, if we add a new record to the Store it will be rendered into our DataView:\n *\n *     touchTeam.getStore().add({\n *",1401679,39,"age: 33\n *     });\n *\n * We didn't have to manually update the DataView, it's just automatically updated. The same happens if we modify one\n * of the existing records in the Store:\n *\n *     touchTeam.getStore().getAt(0).set('age', 42);\n *\n * This will get the first record in the Store (Jamie), change the age to 42 and automatically update what's on the\n * screen.",1016608,37,"var touchTeam = Ext.create('Ext.DataView",1166158,45,"store: {\n *             fields: ['name', 'age'],\n *    ",919704,32,"    {name: 'Jamie',  age: 100},\n *                 {name: 'Rob',   age: 21},\n *                 {name: 'Tommy', age: 24},\n *                 {name: 'Jacky', age: 24},\n *                 {name: 'Ed',   age: 26}",1332094,34,"\n *         itemTpl: '<div>{name} is {age} years old</div>'\n *     });\n *\n *     touchTeam.getStore().add({\n *",1401679,39,"age: 33\n *     });\n *\n *     touchTeam.getStore().getAt(0).set('age', 42);\n *\n * # Loading data from a server\n *\n * We often want to load data from our server or some other web service so that we don't have to hard code it all\n * locally. Let's say we want to load some horror movies from Rotten Tomatoes into a DataView, and for each one\n * render the cover image and title. To do this all we have to do is grab an api key from rotten tomatoes (http://developer.rottentomatoes.com/)\n * and modify the {@link #store} and {@link #itemTpl} a little:\n *\n *     @example",879816,33,"DataView",1166158,45,"store: {\n *    ",1329391,36,"    fields: ['id', 'title',\n *",1333775,36,"name:'thumbnail_image',\n *",1421792,37,", record) {return record.raw.posters.thumbnail; }\n *              }],\n *",1476335,51,"jsonp',\n *                 // Modify this line with your API key, pretty please...\n *                 url: 'http://api.rottentomatoes.com/api/public/v1.0/movies.json?apikey=hbjgfgryw8tygxztr5wtag3u&q=Horror',\n *\n *    ",1329536,42,1402095,37,"    rootProperty: 'results'",1330976,51,",\n *\n *         itemTpl: '<img src=\"{thumbnail_image}\" /><p>{title}</p><div style=\"clear: both\"></div>'\n *     });\n *\n * The Store no longer has hard coded data, instead we've provided a",1620939,35,", which fetches\n * the data for us. In this case we used a JSON-P proxy so that we can load from Twitter's JSON-P search API. We also\n * specified the fields present for each tweet, and used Store's {@link Ext.data.Store#autoLoad autoLoad} configuration\n * to load automatically. Finally, we configured a Reader to decode the response from Twitter, telling it to expect\n * JSON and that the tweets can be found in the 'results' part of the JSON response.\n *\n * The last thing we did is update our template to render the image, Twitter username and message. All we need to do\n * now is add a little CSS to style the list the way we want it and we end up with a very basic Twitter viewer. Click\n * the preview button on the example above to see it in action.\n */\nExt.define('Ext.dataview.DataView",1839196,39,"alternateClassName: 'Ext.DataView',\n\n    mixins: ['Ext.mixin.Selectable'],\n\n    xtype: 'datav",999933,46,"\n",46240,32,"\n",46240,38,705184,46,"\n      \n\n    /**\n     * @event containertap\n     * Fires when a tap occurs and it is not on a template node",1436512,37,"/**\n     * @event itemtouchstart",1020014,34,"touched\n     * @param {Ext.dataview.DataView} this",1308815,51," touched\n     * @param {Ext.Element/Ext.dataview.component.DataItem} target The element or DataItem touched",1664767,43,"record associated to the item",1082749,51,749952,33,"temtouchmov",1020013,35,"moved\n     * @param {Ext.dataview.DataView} this",1308815,51," moved\n     * @param {Ext.Element/Ext.dataview.component.DataItem} target The element or DataItem moved",1664767,43,"record associated to the item",1082749,51,749952,33,"temtouchend",1020014,34,"touched\n     * @param {Ext.dataview.DataView} this",1308815,51," touched\n     * @param {Ext.Element/Ext.dataview.component.DataItem} target The element or DataItem touched",1664767,43,"record associated to the item",1082749,51,749952,33,"temtap",1020014,34,"tapped\n     * @param {Ext.dataview.DataView} this",1308815,51," tapped\n     * @param {Ext.Element/Ext.dataview.component.DataItem} target The element or DataItem tapped",1664767,43,"record associated to the item",1082749,51,749952,33,"temtaphold\n     * Fires whenever an item's taphold event fires\n     * @param {Ext.dataview.DataView} this",1308815,51," touched\n     * @param {Ext.Element/Ext.dataview.component.DataItem} target The element or DataItem touched",1664767,43,"record associated to the item",1082749,51,749952,33,"temsingletap",1020014,34,"singletapped\n     * @param {Ext.dataview.DataView} this",1308815,51," singletapped\n     * @param {Ext.Element/Ext.dataview.component.DataItem} target The element or DataItem singletapped",1664767,43,"record associated to the item",1082749,51,749952,33,"temdoubletap",1020014,34,"doubletapped\n     * @param {Ext.dataview.DataView} this",1308815,51," doubletapped\n     * @param {Ext.Element/Ext.dataview.component.DataItem} target The element or DataItem doubletapped",1664767,43,"record associated to the item",1082749,51,749952,33,"temswip",1020013,35,"swiped\n     * @param {Ext.dataview.DataView} this",1308815,51," swiped\n     * @param {Ext.Element/Ext.dataview.component.DataItem} target The element or DataItem swiped",1664767,43,"record associated to the item",1082749,51,749536,32,"select\n     * @preventable doItemSelect",1020014,34,"selected\n     * @param {Ext.dataview.DataView} this",1664767,43,"record associated to the item",749536,32,"deselect\n     * @preventable doItemDeselect",1020014,34,"deselected\n     * @param {Ext.dataview.DataView} this",1664767,43,"record associated to the item\n     * @param {Boolean} supressed Flag to suppress the event",749536,32,"refresh\n     * @preventable doR",1623806,33,"DataView is refreshed\n     * @param {Ext.dataview.DataView",1839648,32,"hide\n     * @event add\n     */\n\n    /**\n     * @hide\n     * @event remove\n     */\n\n    /**\n     * @hide\n     * @event move",1839966,52,"layout\n         * Hide layout config in DataView. It only causes confusio",734288,36,"private",1237664,43,"Ext.data.Store/Object} store\n         * Can be either a Store instance or a",1500305,35,"turned into a Store. The Store is used\n         * to populate the set of items that will be rendered in the DataView. See the DataView intro documentation for\n         * more information about the relationship between Store and DataView",740976,43,"stor",1423840,39,"Object[]} data",1169056,44,1626798,41,1169049,81,"dataview",1013520,33,"String} emptyText",1158068,35,"the view when there is no data to display\n         */\n        empty",1084461,42,"Boolean} deferEmptyText `true` to defer `emptyText` being applied until the store's first load.\n         */\n        deferEmptyTex",1842464,33,"@cfg {String/String[]/Ext.XTemplate} itemTpl\n         * The `tpl` to use for each of the items displayed in this DataView.\n         */\n        itemTpl: '<div>{text}</div>",1013520,33,1082860,48,"pply to an item on the view while it is being pre",1028044,47,"pressedCls: 'x-item-presse",1336144,42,"itemCls\n         * An additional CSS class to apply to items within the DataView",740976,43,"item",1244496,47,"} selected",1083440,33,"pply to an item on the view while it is select",1028046,45,"selectedCls: 'x-item-selecte",1336144,43,"riggerEvent\n         * Determines what type of touch event causes an item to be selected.\n         * Valid options are: 'itemtap', 'itemsingletap', 'itemdoubletap', 'itemswipe', 'itemtaphold'",740976,44,"riggerEvent: 'itemtap",1013520,33,"String} triggerCtEvent\n         * Determines what type of touch event is recognized as a touch on the container.\n         * Valid options are 'tap' and 'singletap'",740976,44,"riggerCtEvent: 'tap",1013520,42,"deselectOnContainerClick\n         * When set to true, tapping on the DataView's background (i.e. not on\n         * an item in the DataView) will deselect any currently selected item",1098336,44,"deselectOnContainerClick",1097424,37,"scrollable",1169056,44,"scrollable",1097424,38,"Boolean/Object} inline\n         * When set to `true` the items within the DataView will have their display set to inline-block\n         * and be arranged horizontally. By default the items will wrap to the width of the DataView.\n         * Passing an object with `{ wrap: false }` will turn off this wrapping behavior and overflowed\n         * items will need to be scrolled to horizontally",740976,43,"inlin",1423840,39,"Number",1085101,107,".\n         *",1085227,65,1444063,32,"ressedDelay: 10",941232,33,"String/Boolean} loadingText\n         * A string to display during data load operations.  If specified, this text will be\n         * displayed in a loading div and the view's contents will be cleared while loading, otherwise the view's\n         * contents will continue to display normally until the new data is loaded and the contents are replaced.\n         */\n        loadingText",1158183,46,"Boolean} useComponents\n         * Flag the use a component based DataView implementation.  This allows the full use of components in the\n         * DataView at the cost of some",739426,36,"Checkout the [DataView Guide](#!/guide/dataview) for more information on u",1276763,34,1470112,35,"Component",1272768,39,"Object} itemConfig",1631573,35,"that is passed to every item created by a component based DataView. Because each\n         * item that a DataView renders is a Component, we can pass configuration options to each component to\n         * easily customize how each child component behave",1097546,35,"this is only used when `{@link #useComponents}` is",732366,50,"itemConfig",1188255,36,"Number} maxItemCache\n         * Maintains a cache of reusable components when using a component based DataView.  Improving performance at\n         * the cost of memory",1097547,34,"this is currently only used when `{@link #useComponents}` is",732366,50,"maxItemCache: 2",941232,33,1169563,35,"xtype used for the component based DataView",1097547,34,"this is only used when `{@link #useComponents}` is",732366,50,"defaultType: 'dataitem",1013520,42,"scrollToTopOnRefresh\n         * Scroll the DataView to the top when the DataView is refresh",1028046,45,"scrollToTopOnRefresh: true",856960,53,"var me = this,\n            layout;\n\n        me.hasLoadedStore = false;\n\n        me.mixins.selectable.constructor.apply(me, arguments);\n\n        me.indexOffset = 0;\n",933760,35,"\n        layout = this.getLayout();\n        if (layout && !layout.isAuto",795551,33,"'The base layout for a DataView must always be an Auto Layout'",954462,32,"temCls: function(newCls, oldCls",814928,42,";\n",712445,37,"if (oldCls) {\n                container.doRemoveItemCls(oldCls",1201407,33,"newCls) {\n                container.doAddItemCls(new",764846,42,"storeEventHooks: {\n        beforeload: 'onBeforeLoad',\n        load: 'onLoad',\n        refresh: 'refresh',\n        addrecords: 'onStoreAdd',\n        removerecords: 'onStoreRemove',\n        updaterecord: 'onStoreUpdate'",547327,51,"callParent();",1312704,38,"ntainer,\n            triggerEvent = me.getTriggerEvent();\n\n        me.on(me.getTriggerCtEvent(), me.onContainerTrigger, me);\n\n        container = me.container = this.add(new Ext.dataview[me.getUseComponents() ? 'component' : 'element'].Container({\n            baseCls: this.getBaseCls()\n        }));\n        container.dataview = me;\n\n        if (triggerEvent) {\n            me.on(triggerEvent, me.onItemTrigger, me",868175,32,"on({\n            itemtouchstart: 'onItemTouchStart',\n            itemtouchend: 'onItemTouchEnd',\n            itemtap: 'onItemTap',\n            itemtaphold: 'onItemTapHold',\n            itemtouchmove: 'onItemTouchMove',\n            itemsingletap: 'onItemSingleTap',\n            itemdoubletap: 'onItemDoubleTap',\n            itemswipe: 'onItemSwipe'",791841,36,"\n        if (me.getStore()) {\n            if (me",1010693,32,"me.refresh(",755456,52,"me.on({\n                    painted: 'refresh'",1039872,34,286238,44,"\n    },\n\n    applyInline",1000832,33,1010880,36,1555328,40,"}",1196672,36,"updateInline: function(newInline, oldInline",757190,43,";\n        if (oldInline) {\n            this.removeCls([baseCls + '-inlineblock', baseCls + '-nowrap']);\n        }\n        if (newInline) {\n            this.addCls(baseCls + '-inlineblock');\n            if (Ext.isObject(newInline) && newInline.wrap",502103,35,"addCls(baseCls + '-nowrap'",755456,52,"this.removeCls(baseCls + '-nowrap",1325936,40,"/**\n     * Function which can be overridden to provide custom formatting for each Record that is used by this\n     * DataView's {@link #tpl template} to render each node.\n     * @param {Object/Object[]} data The raw data object that was used to create the Record.\n     * @param {Number} index the index number of the Record being prepared for rendering",1660064,33,"record The Record being prepared for rendering.\n     * @return {Array/Object} The formatted data in a format expected by the internal {@link #tpl template}'s `overwrite()` method.\n     * (either",649409,36," (i.e. `{0}`) or an object (i.e. `{foo: 'bar'}`))\n     */\n    prepareData: function(data, index, record",1346157,38,"/ apply to the selection model to maintain visual UI cues\n    onContainerTrigger",1774768,37,";\n        if (e.target != me.element.dom",993423,42,"if (me.getDeselectOnContainerClick() && me.getStore()) {\n            me.deselectAll();\n        }\n    },\n\n    // apply to the selection model to maintain visual UI cues\n    onItemTrigger: function(me, index",995391,49,"this.selectWithEvent(this.getStore().getAt(index));\n        }\n    },\n\n    doAddPressedCls",1373664,33,"me = this,\n            item = me.getItemAt(me.getStore().indexOf(record));\n        if (Ext.isElement(item)) {\n            item = Ext.get(item);\n        }",1043119,33,"if (",1051349,40,".renderElement.add",1094330,38," else {\n                item.add",1094330,61,"onItemTouchStart: function(container, target, index, ",1452352,40,"store = me.getStore(),\n            record = store && store.getAt(index);\n\n        me.fireAction('itemtouchstart', [me, index, target, record, e], 'doItemTouchStart');\n    },\n\n    doItemTouchStart: function(me, index, target, record) {\n        var",1093412,36,1657662,37,1093541,60,"Ext.defer(me.doAddPressedCls, pressedDelay, me, [record",990255,53,"me.doAddPressedCls",1654558,32,"}\n    },\n\n    onItemTouchEnd: function(container, target, index, ",1452352,40,"store = me.getStore(),\n            record = store && store.getAt(index);\n\n",977886,33,1094153,32,"clearTimeout(this.pressedTimeout);\n            delete this.pressedTimeout;\n        }\n\n        if (record && target) {\n            if (target",1051353,32,"target.renderE",1094317,51," else {\n                targe",1094322,57,"\n        me.fireEvent('itemtouchend', me, index, target, record, e);\n    },\n\n    onItemTouchMove: function(container, target, index, ",1452352,40,"store = me.getStore(),\n            record = store && store.getAt(index);\n\n",1094122,63,1094189,45,1094238,34,"}\n\n        if (record && target) {\n            if (target",1051353,32,"target.renderE",1094317,51," else {\n                targe",1094322,61,"    me.fireEvent('itemtouchmove', me, index, target, record, e);\n    },\n\n    onItemTap: function(container, target, index, ",1452352,40,"store = me.getStore(),\n            record = store && store.getAt(index);\n\n        me.fireEvent('itemtap', me, index, target, record, e);\n    },\n\n    onItemTapHold: function(container, target, index, ",1452352,40,"store = me.getStore(),\n            record = store && store.getAt(index);\n\n        me.fireEvent('itemtaphold', me, index, target, record, e);\n    },\n\n    onItemSingleTap: function(container, target, index, ",1452352,40,"store = me.getStore(),\n            record = store && store.getAt(index);\n\n        me.fireEvent('itemsingletap', me, index, target, record, e);\n    },\n\n    onItemDoubleTap: function(container, target, index, ",1452352,40,"store = me.getStore(),\n            record = store && store.getAt(index);\n\n        me.fireEvent('itemdoubletap', me, index, target, record, e);\n    },\n\n    onItemSwipe: function(container, target, index, ",1452352,40,"store = me.getStore(),\n            record = store && store.getAt(index);\n\n        me.fireEvent('itemswipe', me, index, target, record, e);\n    },\n\n    // invoked by the selection model to maintain visual UI cues\n    onItemSelect: function(record, suppress",1091019,32,1675194,41,"me.doItemSelect(me",1663711,40,"me.fireAction('select', [me, record], 'doItemSelect');\n        }\n    },\n\n    // invoked by the selection model to maintain visual UI cues\n    doItemSelect: function(me, record) {\n        if (me.container && !me",994236,32,"item = me.getItemAt(me.getStore().indexOf(record));\n            if (Ext.isElement(item)) {\n                item = Ext.get(item",1201407,33,"item) {\n        ",1036169,44,"        item.renderE",1094317,50,"        item.renderElement.addCls(me.getSelectedCls()",1115104,48,"item",1094323,44,"        item.addCls(me.getSelectedCls()",198256,43,"}\n    },\n\n    // invoked by the selection model to maintain visual UI cues\n    onItemDeselect: function(record, suppress",1091019,32,"        if (me.container && !me.isDestroyed) {\n    ",1675194,41,"    me.doItemDeselect(me, ",1654559,35,"else {\n                me.fireAction('deselect', [me, record, suppressEvent], 'doItemDeselect",1325936,40,"doItemDeselect: function(me, record) {\n        var item = me.getItemAt(me.getStore().indexOf(record));\n\n        if (Ext.isElement(item)) {\n            item = Ext.get",1301163,32,"tem) {\n    ",1036169,44,"    item.renderElement.removeCls([me.getPressedCls(), me.getSelectedCls()]",464704,40,"item.removeCls([me.getPressedCls(), me.getSelectedCls()",1642800,40,"update",1563270,35,"store = this.getStore();\n        if (!store) {\n            this.setStore(",1603072,32,1829505,44,"utoDestroy: tru",912702,34,"{\n            store.add(d",783541,33,1506344,33,"var me = this,\n            bindEvents = Ext.apply({}, me.storeEventHooks, { scope: me }),\n            proxy, reader;\n\n        if (store) {\n           ",1602732,38,"store);\n            if (store && Ext.isObject(store) && store.isStore) {\n                store.on(bindEvents);\n                proxy = store.getProxy();\n",1564015,49,1564068,48,"if (reader) {\n                        reader.on('exception', 'handleException', thi",1741439,58,132544,39,"Logger.warn(\"The specified Store cannot be found\", ",1642639,40,"return store;\n    },\n\n    /**\n     * Method called when the Store's Reader throws an exception\n     * @method handleException\n     */\n    handleExcep",859984,32,"setMasked(false);",1506325,35,"newStore, oldStor",1452352,40,"bindEvents = Ext.apply({}, me.storeEventHooks, { scope: me }),\n            proxy, reader;\n\n        if (oldStore && Ext.isObject(oldStore) && oldStore.isStore) {\n            oldStore.un(bindEvents);\n\n            if (!me",974624,32,"me.onStoreClear(",501888,35,"ldStore.getAutoDestroy()) {\n                oldStore",1658620,43,"{\n                proxy = oldStore.getProxy();\n",1564015,49,1564068,48,"if (reader) {\n                        reader.un('exception', 'handleException', thi",1741439,58,"        }\n\n        if (newStore) {\n            if (newStore.isLoaded()) {\n                this.hasLoadedStore",943116,40,"newStore.isLoading()) {\n                me.onBeforeLoad(",1201407,33,"me.container) {\n                me.refresh(",1774576,41,"BeforeLoad: function() {\n        var loadingText = this.getLoadingText();\n        if (loadingText && this.isPainted()) {\n            this.setMasked({\n    ",1157802,32,"               message: loadingText",339040,36,"this.hideEmptyText();\n    },\n\n    updateEmptyText: function(newEmptyText, oldEmptyT",667919,42,"store;\n\n        if (oldEmptyText && me.emptyTextCmp) {\n            me.remove(me.emptyTextCmp, true);\n            delete me.emptyTextCmp;\n        }\n\n        if (newEmptyText) {\n            me.emptyTextCmp = me.add({\n",297085,37,"               cls: me.getBaseCls() + '-emptytext',\n                html: newEmptyText,\n",1071132,41,"});\n            store = me.getStore();\n            if (store && me.hasLoadedStore && !store.getCount()) {\n                this.showEmptyText(",1774576,41,"Load: function(store) {\n        //remove any masks on the store\n        this.hasLoadedStore = true;",1030329,32,"\n        if (!store.getCount()) {\n            this.showEmptyTex",1560127,38,"Refreshes the view by reloading the data from the store and re-rendering the template.",961524,43,"var me = this,\n            container = me.container;\n\n        if (!me.getStore()) {\n            if (!me.hasLoadedStore && !me.getDeferEmptyText()) {\n                me.showEmptyText(",1347119,35,";\n        }\n",712445,37,"me.fireAction('refresh', [me], 'doRefresh'",1032618,34,782605,133,"onAfterRend",1517453,38,933759,47,"updateStore(me.getStore()",1049488,35,"n",1308895,36," @param {Number} index I",905533,34,"Ext.dom.Element/Ext.dataview.component.DataItem} item I",905471,34,"/\n    getItem",1308940,42,"getViewItems()[index - this.indexOffset",1676080,37,"index for the specified item.\n     * @param {Number} item The item to locate",1307318,32,"for the specified item.\n     */\n    getItemIndex",1304399,44,"getViewItems().indexOf(item);\n        return (index === -1) ? index : this.indexOffset + index",484224,34,"n array of the current items in the DataView",412688,33,"[]/Ext.dataview.component.DataItem[]} Array of Items.\n     */\n    getViewItems",1062192,36,"ontainer.getViewItems();\n    },\n\n    doRefresh: function(me) {\n        var container = me.container,\n            store = me.getStore(),\n            records = store.getRange(),\n            items = me.getViewItems(),\n            recordsL",1323472,33,1292264,35,"deltaLn = recordsLn - itemsLn,\n            scrollable = me.getScrollable()",302221,32,"if (this.getScrollToTopOnRefresh() && scrollable) {\n            scrollable.getScroller().scrollToTop();\n        }\n\n        // No items, hide all the items from the collection.\n        if (recordsLn < 1) {\n            me.onStoreClear(",1765272,32," else {\n            me.hideEmptyText();\n        }\n\n        // Too many items, hide the unused ones\n        if (deltaLn < 0) {\n            container.moveItemsToCache(itemsLn + deltaLn, itemsLn - 1);\n            // Items can changed, we need to refresh our references\n            items = me.getViewItems();\n            itemsLn = items.length;\n        }\n        // Not enough items, create new ones\n        else if (deltaLn > 0) {\n            container.moveItemsFromCache(store.getRange(itemsLn));\n        }\n\n        // Update Data and insert the new html for existing items\n        for (i = 0; i < itemsL",806640,51,"container.updateListItem(records[i]",1289712,32,"this.hasSelection()) {\n            var selection = this.getSelection(),\n                selectionLn = this.getSelectionCount(),\n                record;\n            for (i = 0; i < selectionL",1691537,35,"selection[i];\n                this.doItemSelect(this, ",1658748,33,"    },\n\n    showEmptyText",544176,32,"getEmptyText() && (this.hasLoadedStore || !this.getDeferEmptyText())) {\n            this.emptyTextCmp",1004851,35,"EmptyText",544176,32,"getEmptyText()) {\n            this.emptyTextCmp.hide();",703664,57,"store = this.getStore(),\n            proxy = (store && store.getProxy()),\n            reader = (proxy && proxy.getReader());\n",1482112,35,"// TODO: Use un() instead of clearListeners() when TOUCH-2723 is fixed.\n//          reader.un('exception', 'handleException', this);\n            reader.clear",1825727,32,1053647,37,"this.setStore(null);\n    },\n\n    onStoreClear",917791,52,"ntainer = me.container,\n            items = me.getViewItems();\n\n        container.moveItemsToCache(0, items.length - 1);\n        this.showEmptyText(",330976,50,"Ext.data.Store} store\n     * @param {Array} records\n     */\n    onStoreAdd",1506111,37,"if (records) {\n            this.hideEmptyText();\n            this.container.moveItemsFromCache(record",764352,37,1472847,33,"Store} store\n     * @param {Array} records\n     * @param {Array} indices\n     */\n    onStoreRemove: function(store, records, indices",814928,42,1658350,48,";",1265760,48,"container.moveItemsToCache(indices[i], indices[i]",813744,38,"rivate",1625213,37,1664767,38,1622874,32,1623037,32,"\n     */\n    onStoreUpdate: function(store, record, newIndex, oldI",1305583,43,"container = me.container,\n            item;\n\n        oldIndex = (typeof oldIndex === 'undefined') ? newIndex : oldIndex;\n\n        if (oldIndex !== newIndex) {\n            container.updateAtNewIndex(oldIndex, newIndex, record);\n            if (me.isSelected(record)) {\n                me.doItemSelect(me, ",1658748,33,"        else {\n            item = me.getViewItems()[newIndex];\n    ",1043120,32,"    // Bypassing setter because sometimes we pass the same record (different data)\n                container.updateListItem(record, i",1033181,35,"\n});\n\n/**\n * @aside video list\n * @aside guide list\n *\n * IndexBar is a component used to display a list of data (primarily an alphabet) which can then be used to quickly\n * navigate through a list (see {@link Ext.List}) of data. When a user taps on an item in the {@link Ext.IndexBar},\n * it will fire the {@link #index} event.\n *\n * Here is an example of the usage in a {@link Ext.List}:\n *\n *     @example phone portrait preview\n *     Ext.define('Contac",1497280,88,"'firstName', 'lastName",1460880,37,"var store = new Ext.data.JsonStore({\n *        model: 'Contact'",918445,46,"grouper: {\n *",1632011,41,"*",1632066,39,"Name')[0];\n *            }\n *        }",918476,38,918515,40,"},\n *            {",918575,40,"},\n *",1659556,33,918655,39,918695,39,"},\n *",1659679,33,"  lastName: 'Conran'},\n *            {firstName: 'Dave',    lastName: 'Kaneda'},\n *            {firstName: 'Jacky',   lastName: 'Nguyen'},\n *            {firstName: 'Abraham', lastName: 'Elias'},\n *            {firstName: 'Jay',     lastName: 'Robinson'},\n *            {firstName: 'Nigel',   lastName: 'White'},\n *            {firstName: 'Don',     lastName: 'Griffin'},\n *            {firstName: 'Nico',    lastName: 'Ferrero'},\n *            {firstName: 'Jason',   lastName: 'Johnsto",918794,37,"var list = new Ext.List({\n *",725840,36,918894,81,"\n *        grouped     : true,\n *        indexBar    : true,\n *",1618203,32,"hideOnMaskTap: false\n *     });\n *\n*/\nExt.define('Ext.dataview.IndexBar",1082302,34,"    alternateClassName: 'Ext.IndexBar',\n\n    /**\n     * @event index\n     * Fires when an item in the index bar display has been tapped.\n     * @param {Ext.dataview.IndexBar} this The IndexBar instance",391269,38,"inside the tapped node",485087,34,"target The node on the indexbar that has been tapped",1281680,33,"baseCls: Ext.baseCSSPrefix + 'index",1169134,44,"direction\n         * Layout direction, can be either 'vertical' or 'horizontal",730815,43,"direction: 'vertical",1013520,33,"Array} letters\n         * The letters to show on the index ba",1388288,44,"letters: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n\n        ui: 'alphabe",1445648,44,"stPrefix\n         * The prefix string to be used at the beginning of the list.\n         * E.g: useful to add a \"#\" prefix before number",1098336,44,"listPrefix: null\n    },\n    platformConfig: [\n        {\n            theme: ['Blackberry'],\n   ",1021899,41,"   letters: ['*', '#', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n        }\n    ],\n    // @private\n    itemCls: Ext.baseCSSPrefix + ''",849715,33,"newD",955703,38,"baseCls = this.getBaseCls();\n\n",775756,32,"baseCls + '-' + oldDirection, baseCls + '-' + newDirection",1757454,54,"// Blackberry Specific code for Index Bar Indicator\n        if(Ext.theme.is.Blackberry",606862,41,"reference: 'wrapper',\n                classList: ['x-centered', 'x-indexbar-wrapper']",1003017,76,"reference: 'indicator',\n                        classList: ['x-indexbar-indicator'],\n    ",1071128,32,1159296,37,"{\n        ",1757899,32,"indicatorI",1159422,35,"classList: ['x-indexbar-indicator-inner'",1003172,72,"this.callParent()",1894377,32,523568,34,"urn {\n                reference: 'wrapper',\n                classList: ['x-centered', 'x-indexbar-wrapper'],\n    ",991202,50,"    };\n        }\n    },\n\n    updateLetters: function(letters) {\n        this.innerElement.setHtml('');\n\n        if (letters) {\n            var ln = let",913152,62,"n; i++",1868907,38,"createChild({\n                    html: letters[i]",286238,44,"\n    },\n\n    updateListPrefix: function(listPrefix) {\n        if (listPrefix && listPrefix.length",552686,33,".createChild({\n                html: listPrefix\n            }, 0);",1093904,39,1217437,33,1087530,33,"innerElement.on(",1763150,62,1763253,34,"dragend: this.onDragEnd,\n            drag: this.onDrag,\n",712654,32,"}",1770512,51,"e.stopPropagation();\n",1032198,33,"this.getBaseCls() + '-pressed');\n        this.pageBox = this.innerElement.getPageBox();\n        this.onDrag(e)",1787823,48,"this.onDragEnd()",1093292,32,"DragEnd: function() {\n",777460,36,"this.getBaseCls() + '-pressed');\n\n        // Blackberry Specific code for Index Bar Indicator\n        if(this.indicator) {\n            this.indicator.hide();",1093904,41,"Drag: function(e) {\n   ",1059970,44,",\n            target, isValidTarget,\n            pageBox = this.pageBox;\n\n        if (!pageBox) {\n            pageBox = this.pageBox = this.el.getPageBox();\n        }\n\n\n        if (this.getDirection()",956454,32,"f (point.y > pageBox.bottom || point.y < pageBox.top) {",1782046,47,"    target = Ext.Element.fromPoint(pageBox.left + (pageBox.width / 2), point.y);\n            isValidTarget = target.getParent() == this.element;\n\n            // Blackberry Specific code for Index Bar Indicator\n            if(this.indicator) {\n                this.indicator.show();\n\n                var halfIndicatorHeight = this.indicator.getHeight() / 2,\n                    y = point.y - this.element.getY();\n\n                y = Math.min(Math.max(y, halfIndicatorHeight), this.element.getHeight() - halfIndicatorHeight);\n\n                if (this.indicatorInner && isValidTarget) {\n                    this.indicatorInner.setHtml(target.getHtml().toUpperCase()",320272,37,"this.indicator.setTop(y - (halfIndicatorHeight",1094351,32,"    else {\n            if (point.x > pageBox.right || point.x < pageBox.left) {",1782046,47,"    target = Ext.Element.fromPoint(point.x, pageBox.top + (pageBox.height / 2));\n            isValidTarget = target.getParent() == this.",552722,32,"target && isValidTarget",1406190,32,"index', this, target.dom.innerHTML, target);",703664,57,"me = this,\n            elements = Array.prototype.slice.call(me.innerElement.dom.childNodes)",483925,48,"i = 0;\n\n",61168,42,"Ext.removeNode(elements[i]",1449800,37,")",1201764,38,"private - To be made a sample\n */\nExt.define('Ext.dataview.ListItemHeader",1082302,34,"    xtype : 'listitemheader",1161312,98,"Ext.baseCSSPrefix + 'list-header'\n    }\n});\n\n/**\n * A ListItem is a container for {@link Ext.dataview.List} with \n * useSimpleItems: false. \n * \n * ListItem configures and updates the {@link Ext.data.Model records} for  \n * the sub-component items in a list. \n *   \n * Overwrite the `updateRecord()` method to set a sub-component's value. \n * Sencha Touch calls `updateRecord()` whenever the data in the list updates.\n *\n * The `updatedata` event fires after `updateRecord()` runs.\n *\n * *Note*: Use of ListItem increases overhead since it generates more markup than\n * using the List class with useSimpleItems: true. This overhead is more\n * noticeable in Internet Explorer. If at all possible, use\n * {@link Ext.dataview.component.SimpleListItem} instead.\n * \n * The following example shows how to configure and update sub-component items\n * in a list:\n *\n *     Ext.define('Twitter.view.TweetListItem",1419872,33,"view.component.ListItem',\n *         xtype : 'tweetlistitem',\n *         requires: [\n *             'Ext.Img'\n *         ]",1331504,38,"userName: {\n *                 cls: 'usernam",722912,36,"text: {\n *                 cls: 'text",1166432,35,"avatar: {\n *                 docked: 'left',\n *                 xtype : 'image',\n *                 cls   : 'avatar',\n *                 width: '48px',\n *                 height: '48px",1166432,35,"layout: {\n *                 type: 'vbox",1184959,35,"     \n *         applyUserName",203615,36,"return Ext.factory(config, Ext.Component, this.getUserName());\n *         },\n *     \n *         updateUserName: function(newUserName) {\n *             if (newUserName) {\n *                 this.insert(0, newUserName",516976,32,",\n *     \n *         applyText",203615,36,"return Ext.factory(config, Twitter.view.TweetListItemText, this.getText());\n *         },\n *     \n *         updateText: function(newText) {\n *             if (newText) {\n *                 this.add(newText",516976,32,",\n *     \n *         applyAvata",203614,37,"return Ext.factory(config, Ext.Img, this.getAvatar());\n *         },\n *     \n *         updateAvatar: function(newAvatar) {\n *             if (newAvatar) {\n *                 this.add(newAvatar",516976,32,",\n *     \n *         updateRecord: function(record) {     \n *             if (!record) {\n *",1080385,40,"}\n *\n *             this.getUserName().setHtml(record.get('username'));\n *             this.getText().setHtml(record.get('text'));\n *             this.getAvatar().setSrc(record.get('avatar_url'));\n *",1880876,42,"*",1157901,48,"dataview.component.ListItem', {\n    extend: 'Ext.dataview.component.DataItem',\n    xtype : 'listitem',",990606,33,"Ext.baseCSSPrefix + 'list-item',\n\n        dataMap: null,\n\n        body: {\n",984912,44,"cls: 'x-list-item-body'\n        },\n\n        disclosure: {\n",984912,44,"cls: 'x-list-disclosure',\n            hidden: true,\n            docked: 'right'\n        },\n\n        header: {\n",984912,44,"cls: 'x-list-header',\n            html: ' '\n        },\n\n        tpl: null,\n        items: null\n    },\n\n    applyBody: function(body) {\n        if (body && !body.isComponent) {\n            body = Ext.factory(body, Ext.Component, this.getBody());\n        }\n        return body;\n    },\n\n    updateBody: function(body, oldBody) {\n",1116207,32,"this.add(body);\n        } else if (oldBody) {\n            oldBody",883552,34,"applyHeader: function(header) {\n        if (header && !header.isComponent) {\n            header = Ext.factory(header, Ext.Component, this.getHeader());\n        }\n        return header;\n    },\n\n    updateHeader: function(header, oldHeader) {\n        if (oldHeader) {\n            oldHeader",883552,34,"applyDisclosure: function(disclosure) {\n        if (disclosure && !disclosure.isComponent) {\n            disclosure = Ext.factory(disclosure, Ext.Component, this.getDisclosure());\n        }\n        return disclosure;\n    },\n\n    updateDisclosure: function(disclosure, oldDisclosure) {\n        if (disclosure) {\n            this.add(disclosure);\n        } else if (oldDisclosure) {\n            oldDisclosure",883552,34,"updateTpl: function(tpl) {\n        this.getBody().setTpl(tpl);",1326332,36,"record",288192,40,"ataview = me.dataview || this.getDataview(),\n            data = record && dataview.prepareData(record.getData(true), dataview.getStore().indexOf(record), record),\n            dataMap = me.getDataMap(),\n            body = this.getBody(),\n            disclosure = this.getDisclosure();\n\n        me._record = record;\n\n        if (dataMap) {\n            me.doMapData(dataMap, data, body);\n        } else if (body) {\n            body.updateData(data || null);\n        }\n\n        if (disclosure && record && dataview.getOnItemDisclosure()) {\n            var disclosureProperty = dataview.getDisclosureProperty();\n            disclosure[(data.hasOwnProperty(disclosureProperty) && data[disclosureProperty] === false) ? 'hide' : 'show'](",410399,37,"@event updatedata\n",783295,42,"DataItem is upda",1100073,32,"view.component.DataItem} this The DataItem insta",17075,32,"newData The new data.\n         */\n        me.fireEvent('updatedata', me, data",974175,45,"Ext.destroy(this.getHeader());",704879,55,"A SimpleListItem is a simplified list item that is used by {@link Ext.dataview.List} when\n * useSimpleItems is set to true.  It supports disclosure icons and headers and generates the\n * slimmest markup possible to achieve this. It doesn't support container functionality like adding\n * or docking items. If you require those features you should have your list use\n * {@link Ext.dataview.component.ListItem} instances.\n */\nExt.define('Ext.dataview.component.SimpleListItem",1082302,34,"    xtype : 'simplelistitem',",990606,33,"Ext.baseCSSPrefix + 'list-item',\n\n        disclosure: {\n",984912,44,"cls: 'x-list-disclosure",1087197,39,"\n        header: {\n",984912,44,"cls: 'x-list-header',\n            html: ' '\n        },\n\n        /*\n         * @private dataview\n         */\n        dataview",1314560,42,1663012,38,"of this ListTplItem. It is controlled by the Lis",1158479,44,"record: null",547327,51,991987,32," + '-tpl');\n    },\n\n    applyHeader: function(header) {\n        if (header && !header.isComponent) {\n            header = Ext.factory(header, Ext.Component, this.getHeader());\n        }\n        return header;\n    },\n\n    updateHeader: function(header, oldHeader) {\n        if (oldHeader) {\n            oldHeader",883552,34,"applyDisclosure: function(disclosure) {\n        if (disclosure && !disclosure.isComponent) {\n            disclosure = Ext.factory(disclosure, Ext.Component, this.getDisclosure());\n        }\n        return disclosure;\n    },\n\n    updateDisclosure: function(disclosure, oldDisclosure) {\n        if (disclosure) {\n            this.element.appendChild(disclosure.renderElement);\n        } else if (oldDisclosure) {\n            oldDisclosure",883552,34,"updateRecord",1373664,33,"me = this,\n            dataview = me.dataview || this.getDataview(),\n            data = record && dataview.prepareData(record.getData(true), dataview.getStore().indexOf(record), record),\n            disclosure = this.getDisclosure();\n\n        me.updateData(data || null);\n\n        if (disclosure && record && dataview.getOnItemDisclosure()) {\n            var disclosureProperty = dataview.getDisclosureProperty();\n            disclosure[(data.hasOwnProperty(disclosureProperty) && data[disclosureProperty] === false) ? 'hide' : 'show']();",703664,53,"Ext.destroy(this.getHeader(), this.getDisclosure());",704879,55,1281408,34,"PositionMap', {\n    config: {\n        minimumHeight: ",856958,60,"map = [];\n        this.adjustments = {};\n        this.offset = 0",1746032,48,"populate: function(count, offset) {\n        var map = this.map = this.map || [],\n            minimumHeight = this.getMinimumHeight(),\n            i, previousIndex, ln;\n\n        offset = offset || 0;\n\n        // We add 1 item to the count so that we can get the height of the bottom item\n        count++;\n        map.length = count;\n\n        map[0] = 0;\n        for (i = offset + 1, ln = count - 1; i <= ln; i++) {\n            previousIndex = i - 1;\n            map[i] = map[previousIndex] + minimumHeight;\n        }\n\n        this.adjustments = {\n            indices: [],\n            heights: {}\n        };\n        this.offset = 0;\n        for (i = 1, ln = count - 1; i <= ln; i++) {\n            previousIndex = i - 1;\n            this.offset += map[i] - map[previousIndex] - minimumHeight;\n        }\n    },\n\n    setItemHeight: function(index, height) {\n        height = Math.max(height, this.getMinimumHeight());\n        if (height !== this.getItemHeight(index)) {\n            var adjustments = this.adjustments;\n            adjustments.indices.push(parseInt(index, 10));\n            adjustments.heights[index] = height;\n        }",1450141,42,"var adjustments = this.adjustments,\n            indices = adjustments.indices,\n            heights = adjustments.heights",1301006,42,"ln = indices.length,\n            minimumHeight = this.getMinimumHeight(),\n            difference = 0,\n            i, j, height, index, nextIndex, currentHeight;\n\n        if (!adjustments.indices.length",1780991,49,"Ext.Array.sort(indices,",934907,53,1563503,51,"index = indices[i];\n            nextIndex = indices[i + 1] || map.length - 1;\n\n            currentHeight = (map[index + 1] !== undefined) ? (map[index + 1] - map[index] + difference) : minimumHeight;\n            height = heights[index];\n\n            difference += height - currentHeight;\n\n            for (j = index + 1; j <= nextIndex; j++) {\n                map[j] += differenc",981104,36,"this.offset += difference;\n        this.adjustments = {\n            indices: [],\n            heights: {}\n        };",1762320,34,"getItemHeigh",1308941,41,"map[index + 1] - this.map[index];\n    },\n\n    getTotal",1876891,36,"((this.map.length - 1) * this.getMinimumHeight()) + this.offset;\n    },\n\n    findIndex: function(pos) {\n        return this.map.length ? this.binarySearch(this.map, pos) : 0;\n    },\n\n    binarySearch: function(sorted, value",1271828,43,"= sorted.length;\n\n        if (value < sorted[0]",1745551,36,"        if (value > sorted[end - 1]) {\n            return end - 1;\n        }\n        while (start + 1 < end) {\n            var mid = (start + end) >> 1,\n                val = sorted[mid];\n            if (val ",564275,35,"mid;\n            } else if (val < value) {\n                start = mid",343120,39,"end = mid",464768,34,1272296,33,"aside guide list\n * @aside video list\n *\n * List is a custom styled DataView which allows Grouping, Indexing, Icons, and a Disclosure. See the\n * [Guide](#!/guide/list) and [Video](#!/video/list) for more.",1166088,61,"List",1166158,45,"itemTpl: '{title}'",919700,38,"title: 'Item 1' },\n *             { title: 'Item 2' },\n *             { title: 'Item 3' },\n *             { title: 'Item 4'",1180862,34," more advanced example showing a list of people grouped by last name",1078016,50,"define('Contac",1497280,88,"'firstName', 'lastName",1460880,37,1497728,53,"model: 'Contact'",918445,46,"grouper: {\n *",1632011,41,"*",1632066,39,"Name')[0];\n *            }\n *        }",918476,80,918735,32,"Rob',     lastName: 'Dougan",918733,34,"Ed',      lastName: 'Spencer'",918735,32,"Jamie',   lastName: 'Avins' ",918734,33,"Aaron',   lastName: 'Conran",918733,34,"Dave',    lastName: 'Kaneda",918733,34,"Jacky',   lastName: 'Nguyen",918733,34,"Abraham', lastName: 'Elias' ",918734,33,"Jay',     lastName: 'Robinson'",918736,33,"gel',   lastName: 'White' ",918734,33,"Don',     lastName: 'Griffin'",918735,35,"o',    lastName: 'Ferrero'",918735,32,"Jason',   lastName: 'Johnsto",918794,201,",\n *        grouped: true",1892583,33,"dock items to the bottom or top of a List, you can use the scrollDock configuration on child items in this List. The following example adds a button to the bottom of the List.\n *\n *     @example phone preview\n *     Ext.define('Contac",1497280,88,"'firstName', 'lastName",1460880,37,1497728,53,"model: 'Contact'",918445,46,"grouper: {\n *",1632011,41,"*",1632066,39,"Name')[0];\n *            }\n *        }",918476,80,918735,32,"Rob',     lastName: 'Dougan",918733,34,"Ed',      lastName: 'Spencer'",918735,32,"Jamie',   lastName: 'Avins' ",918734,33,"Aaron',   lastName: 'Conran",918733,34,"Dave',    lastName: 'Kaneda",918733,34,"Jacky',   lastName: 'Nguyen",918733,34,"Abraham', lastName: 'Elias' ",918734,33,"Jay',     lastName: 'Robinson'",918736,33,"gel',   lastName: 'White' ",918734,33,"Don',     lastName: 'Griffin'",918735,35,"o',    lastName: 'Ferrero'",918735,32,"Jason',   lastName: 'Johnsto",918794,72,1329719,39,918903,80," store: store,\n *",254701,34,1076937,32,"scrollDock: 'bottom',\n *",1081671,46,"text: 'Load More...'\n *         }]",1477568,36,"view.List",1547647,34,"List',\n    extend: 'Ext.dataview.DataView',\n    xtype: 'list',\n",803719,42,1730640,34,999952,34,1759760,41,"\n",46240,38,811520,42,1730640,34,707280,40,"isclose\n     * @preventable doDisclose\n     * Fires whenever a disclosure is handled\n     * @param {Ext.dataview.List} this The List instanc",1521984,51,"associated to the item\n     * @param {HTMLElement} target The element disclosed",1308815,51," disclosed",1082749,51,1839966,52,"layout\n         * Hide layout config in DataView. It only causes confusio",734288,36,"private\n         */\n        layout: 'fi",1445648,34,"Boolean/Object} indexBar\n         * `true` to render an alphabet IndexBar docked on the right.\n         * This can also be a config object that will be passed to {@link Ext.IndexBar}",740976,43,"indexBar: false,\n\n        ic",741744,40,"Boolean} preventSelectionOnDisclose `true` to prevent the item selection when the user\n         * taps a disclose",1084092,48,"preventSelectionOnDisclose",1097424,37,1169049,81,"lis",1445648,34,"Boolean} pinHeaders\n         * Whether or not to pin headers on top of item groups while scrolling for an iPhone native list experienc",729952,44,"pinHeader",128416,33,"@cfg {Boolean} grouped\n         * Whether or not to group items in the provided Store with a header for each item",740976,43,"grouped",1028096,45,"/Function/Object} onItemDisclosure\n         * `true` to display a disclosure icon on each list item.\n         * The list will still fire the disclose event, and the event can be stopped before itemtap.\n         * By setting this config to a function, the function passed will be called when the disclosure\n         * is tapped.\n         * Finally you can specify an object with a 'scope' and 'handler'\n         * property defined. This will also be bound to the tap event listener\n         * and is useful when you want to change the scope of the handle",1388288,44,"onItemDisclosur",1423840,45,"} disclosureProperty\n         * A property to check on each record to display the disclosure on a per record basis.  This\n         * property must be false to prevent the disclosure from being displayed on the item",947936,45,"sclosureProperty: 'disclosure",1013520,33,"String} ui\n         * The style of this list. Available options are `normal` and `round`.\n         * Please note: if you use the `round` UI, {@link #pinHeaders} will be automatically turned off as\n         * it is not supported.",1086774,65,"Boolean} useComponents\n         * Flag the use a component based DataView implementation.  This allows the full use of components in the\n         * DataView at the cost of some",739426,36,"Checkout the [DataView Guide](#!/guide/dataview) for more information on u",1276763,34,"* @accessor",19568,33,517696,38,"itemConfig",1631573,35,"that is passed to every item created by a component based DataView. Because each\n         * item that a List renders is a Component, we can pass configuration options to each component to\n         * easily customize how each child component behave",1098336,34," @private",1237664,43,"Number} maxItemCache\n         * Maintains a cache of reusable components when using a component based DataView.  Improving performance at\n         * the cost of memory.\n         * Note this is currently only used when useComponents is tru",729952,34," @private",1237664,43,1169563,35,"xtype used for the component based DataView. Defaults to dataitem.\n         * Note this is only used when useComponents is tru",729952,44,"defaultType",1626576,49,"} itemMap",19568,41,"item",268864,34,"cfg {Number} itemHeight\n         * This allows you to set the default item height and is used to roughly calculate the amount\n         * of items needed to fill the list. By default items are around 50px high.\n         */\n        itemHeight: 42",732448,41,"variableHeight",1469698,32,"allows you optimize the list by not having it read the DOM heights of list items.\n         * Instead it will assume (and set) the height to be the {@link #itemHeight}.\n         */\n        variableHeights",888447,48,"refreshHeightOnUpdate\n         * Set this to false if you make many updates to your list (like in an interval), but updates\n         * won't affect the item's height. Doing this will increase the performance of these updates.\n         */\n        refreshHeightOnUpdate",1097424,38,"Boolean} infinite",1469918,33,"render all items in this list, and render them relatively",736686,34,"uration can not be dynamically changed after the list has",1501130,35,"infinite",888447,48,"useSimpleItems\n         * Set this to true if you just want to have the list create simple items that use the itemTpl.\n         * These simple items still support headers, grouping and disclosure functionality but avoid\n         * container layouts and deeply nested markup. For many Lists using this configuration will\n         * drastically increase the scrolling and render performance.\n         */\n        useSimpleItem",128416,33,"@cfg {Object} scrollabl",950272,43,"crollabl",1423840,33,"The amount of items we render additionaly besides the ones currently visible.\n         * We try to prevent the rendering of items while scrolling until the next time you stop scrolling.\n         * If you scroll close to the end of the buffer, we start rendering individual items to always\n         * have the {@link #minimumBufferSize} prepared.\n         * @type {Number}\n         */\n        bufferSize: 20,\n\n        minimumBufferDistance: 5,\n\n        useHeader",128416,33,"@cfg {Boolean} striped\n         * Set this to true if you want the items in the list to be zebra striped, alternating their\n         * background color.\n         */\n        striped: false\n    },\n\n    platformConfig: [\n        {\n",186338,37,"       itemHeight: 44",1087224,35,"heme: ['Cupertino'],\n            itemHeight: 43\n        }\n    ],\n\n    topRenderedIndex: 0,\n    topVisibleIndex: 0,\n    visibleCount: 0",1782943,41,"var me = this, layout;\n",933760,35,"\n        layout = this.getLayout();\n        if (layout && !layout.isFit",795551,33,"'The base layout for a DataView must always be a Fit Layout');\n        }\n    },\n\n    // We create complex instance arrays and objects in beforeInitialize so that we can use these inside of the initConfig process.\n    beforeI",1217438,32,"var me = this,\n            container = me.container,\n            scrollable, scrollViewElement, pinnedHeader;\n\n        Ext.apply(me, {\n            listItems: [],\n            headerItems: [],\n            updatedItems: [],\n            headerMap: [],\n            scrollDockItems: {\n                top: [],\n                bottom: []",250148,36,"// We determine the translation methods for headers and items within this List based\n        // on the best strategy for the device\n        this.translationMethod = Ext.browser.is.AndroidStock2 ? 'cssposition' : 'csstransform';\n\n        // Create the inner container that will actually hold all the list items\n",702560,38,"container = me.container = Ext.factory({\n",1166472,37,"               scrollable: {\n                    scroller: {\n                        autoRefresh: !me.getInfinite(),\n",821007,35,"'vertical",1162336,40,"}",339040,36,"// We add the container after creating it manually because when you add the container,\n        // the items config is initialized. When this happens, any scrollDock items will be added,\n        // which in turn tries to add these items to the container\n        me.add(container);\n\n        // We make this List's scrollable the inner containers scrollable\n        scrollable = container.getScrollable();\n        scrollViewElement = me.scrollViewElement = scrollable.getElement();\n        me.scrollElement = scrollable.getScroller().getElement();\n\n        me.setScrollable(scrollable);\n        me.scrollableBehavior = container.getScrollableBehavior();\n\n        // Create the pinnedHeader instance thats being used when grouping is enabled\n        // and insert it into the scrollElement\n        pinnedHeader = me.pinnedHeader = Ext.factory({\n            xtype: 'listitemheader',\n            html: '&nbsp;',\n    ",951504,36,"    translationMethod: this.translationMethod\n            },\n            cls: ['x-list-header', 'x-list-header-swap']\n        });\n        pinnedHeader.translate(0, -10000);\n        pinnedHeader.$position = -10000;\n        scrollViewElement.insertFirst(pinnedHeader.renderElement);\n\n        // We want to intercept any translate calls made on the scroller to perform specific list logic\n        me.bind(scrollable.getScroller().getTranslatable(), 'doTranslate', 'onTranslate');\n    },\n\n    // We override DataView's initialize method with an empty function",1217432,38,"var me = this,\n            container = me.container,\n            scrollViewElement = me.scrollViewElement,\n            indexBar = me.getIndexBar(),\n            triggerEvent = me.getTriggerEvent(),\n            triggerCtEvent = me.getTriggerCtEvent();\n\n        if (indexBar) {\n            scrollViewElement.appendChild(indexBar.",552999,35,"if (triggerEvent) {\n            me.on(triggerEvent, me.onItemTrigger, me);\n        }\n        if (triggerCtEvent) {\n            me.on(triggerCtEvent, me.onContainerTrigger, me",868175,32,"element.on({\n            delegate: '.' + me.getBaseCls() + '-disclosure',\n            tap: 'handleItemDisclosure'",791841,36,"\n        container.element.on({\n",712554,53,"scope: me\n        });\n\n        // Android 2.x not a direct child",870672,32,"on({\n            touchstart: 'onItem",952050,38,"ItemTouchEnd',\n            tap: 'onItemTap',\n            taphold: 'onItemTapHold',\n            singletap: 'onItemSingleTap',\n            doubletap: 'onItemDoubleTap',\n            swipe: 'onItemSwipe',\n            delegate: '.' + Ext.baseCSSPrefix + 'list-item'",791841,36,"\n        if (me.getStore()) {\n            me.refresh();\n        }\n    },\n\n    on",703325,40,"me = this,\n            pinnedHeader = me.pinnedHeader,\n            store = me.getStore(),\n            storeCount = store && store.getCount(),\n            grouped = me.getGrouped(),\n            infinite = me.getInfinite();\n\n        if (!storeCount) {\n            me.showEmptyText();\n            me.showEmptyScrollDock();\n\n            pinnedHeader.$position = -10000;\n            pinnedHeader.translate(0, -10000);\n        }\n        else if (infinite && me.itemsCount) {\n            me.handleItemUpdates(y);\n            me.handleItemHeights();\n            me.handleItemTransforms();\n\n            if (!me.onIdleBound) {",1774511,36,"onIdle(me.onAnimationIdle, me);\n                me.onIdleBound",1530880,33,"\n        if (grouped && me.groups && me.groups.length && me.getPinHeaders()) {\n            me.handlePinnedHeader(y);\n        }\n\n        // This is a template method that can be intercepted by plugins to do things when scrolling\n        this.onScrollBinder(x, y);\n    },\n\n    onScrollBinder: function(){},\n\n    handleItemUpdates: function(",676624,40,"listItems = me.listItems,\n            itemsCount = listItems.length,\n            info = me.getListItemInfo(),\n            itemMap = me.getItemMap(),\n            bufferSize = me.getBufferSize(),\n            lastIndex = me.getStore().getCount() - 1,\n            minimumBufferDistance = me.getMinimumBufferDistance(),\n            currentTopVisibleIndex = me.topVisibleIndex,\n            topRenderedIndex = me.topRenderedIndex,\n            updateCount, i, item, topVisibleIndex, bufferDistance, itemIndex;\n\n        // This is the index of the item that is currently visible at the top\n        me.topVisibleIndex = topVisibleIndex = Math.max(0, itemMap.findIndex(-y) || 0);\n\n        if (currentTopVisibleIndex !== topVisibleIndex) {\n            // When we are scrolling up\n            if (currentTopVisibleIndex > topVisibleIndex) {\n                bufferDistance = topVisibleIndex - topRenderedIndex;\n                if (bufferDistance < minimumBufferDistance) {\n                    updateCount = Math.min(itemsCount, minimumBufferDistance - bufferDistance);\n\n                    if (updateCount == ",820607,38,"me.topRenderedIndex = topRenderedIndex = Math.max(0, topVisibleIndex - (bufferSize - minimumBufferDistance));\n                        // Update all\n        ",47264,32,"updateCount",402095,37,"itemIndex = topRenderedIndex + i;\n                            item = listItem",278000,34,"me.updateListItem(item, itemIndex, info",282960,67,754368,36,"or (i = 0; i < updateCount",402095,37,"itemIndex = topRenderedIndex - i",643584,34,"if (itemIndex < 0",277952,32,189424,35,92190,35,"item = listItems.pop",342096,32,"listItems.unshift(item);\n                            me.updateListItem(item, itemIndex, info);\n                            me.topRenderedIndex",527695,84,"            // When we are scrolling down",497664,36,"bufferDistance = bufferSize - (topVisibleIndex - topRenderedIndex);\n\n                if (bufferDistance < minimumBufferDistance) {\n                    updateCount = Math.min(itemsCount, minimumBufferDistance - bufferDistance);\n\n                    if (updateCount == ",820607,38,"me.topRenderedIndex = topRenderedIndex = Math.min(lastIndex - itemsCount, topVisibleIndex - minimumBufferDistance);\n                        // Update all\n        ",47264,32,"updateCount",402095,37,"itemIndex = topRenderedIndex + i;\n                            item = listItem",278000,34,"me.updateListItem(item, itemIndex, info",282960,67,754368,36,"or (i = 0; i < updateCount",402095,37,"itemIndex = topRenderedIndex + itemsCount + i;",289970,33,"itemIndex > lastIndex",277952,32,189424,35,92190,35,"item = listItems",1586828,34,"    listI",1294440,37,"        me.updateListItem(item, itemIndex, info);\n                            me.topRenderedIndex++;\n    ",18350,38,644592,46,"}\n    },\n\n    onAnimationId",652111,52,"info = me.getListItemInfo(),\n            bufferSize = me.getBufferSize(),\n            topVisibleIndex = me.topVisibleIndex,\n            topRenderedIndex = me.topRenderedIndex,\n            lastIndex = me.getStore().getCount() - 1,\n            listItems = me.listItems,\n            itemsCount = listItems.length,\n            topBufferDistance, bottomBufferDistance,\n            i, ln, item, itemIndex;\n\n        topBufferDistance = topVisibleIndex - topRenderedIndex;\n        bottomBufferDistance = topRenderedIndex + bufferSize - topVisibleIndex;\n\n        if (topBufferDistance < bottomBufferDistance) {\n            // This means there are more items below the visible list. The user\n            // has probably just scrolled up. In this case we move some items\n            // from the bottom to the top only if the list is scrolled down a bit\n            if (topVisibleIndex > 0) {\n                ln = bottomBufferDistance - topBufferDistance",188111,35,51820,32,"temIndex = topRenderedIndex - i - 1;\n                    if (itemIndex < 0",67039,79,"tem = listItems.pop();\n                    listItems.unshift(item);\n                    me.updateListItem(item, itemIndex, info);\n                    me.topRenderedIndex--",413536,44,"        else {\n            ln = topBufferDistance - bottomBufferDistance",379343,58,"temIndex = topRenderedIndex + itemsCount + i;\n                if (itemIndex > lastIndex",1834743,67,"tem = listItems.shift();\n                listI",1294440,33,"me.updateListItem(item, itemIndex, info);\n                me.topRenderedIndex",99199,37,"me.handleItemHeights();\n        me.handleItemTransforms();\n\n        me.onIdleBound = false;\n    },\n\n    handleItemHeight",1093328,51,"updatedItems = me.updatedItems,\n            ln = updat",1057981,32,"Map = me.getItemMap(),\n            useSimpleItems = me.getUseSimpleItems(),\n            minimumHeight = itemMap.getMinimumHeight(),\n            headerIndices = me.headerIndices,\n            headerMap = me.headerMap,\n            variableHeights = me.getVariableHeights(),\n            itemIndex, i, j, jln, item, height, scrollDockHeight",1563504,50,"item = updatedItems[i];\n            itemIndex = item.$dataIndex;\n\n            // itemIndex may not be set yet if the store is still being loaded\n            if (itemIndex",1303390,33,"variableHeights",1883713,33,"useSimpleItems ? item.element.getHeight() : item.element.getFirstChild().getHeight();\n                    height = Math.max(height, minimumHeight",1115104,48,"height = minimumHeight",209024,38,"tem.$ownItemHeight = height;\n\n                jln = me.scrollDockItems.top.length;\n                if (item.isFirst) {\n                    me.totalScrollDockTopHeight = 0;\n    ",67744,32,"jl",208320,34,"scrollDockHeight = me.scrollDockItems.top[j].$scrollDock",797536,32,"height += scrollDock",797536,32,"me.totalScrollDockTopHeight += scrollDockHeight",130016,42,"\n                jln = me.scrollDockItems.bottom.length;\n                if (item.isLast",18201,33,"0",188526,38,"    scrollDockHeight = me.scrollDockItems.bottom[j].$scrollDock",797536,32,"height += scrollDockHeight",130016,42,"\n                if (headerIndices && headerIndices[itemIndex",1883712,32,"+= me.headerHeight",209024,38,"temMap.setItemHeight(itemIndex, height);\n                item.$height = height",334944,36,"temMap.update();\n        height = itemMap.getTotalHeight();\n\n        headerMap.length = 0;\n        for (i in headerIndices) {\n            if (headerIndice",506416,39,"headerMap.push(itemMap.map",1300447,39,"me.setScrollerHeight(height);\n\n        me.updatedItems.length = 0;\n    },\n\n    setScroller",767936,35,"var me = this,\n            scroller = me.",945749,39,",\n            translatable = scroller",787628,33,"height != scroller.givenSize) {\n            scroller.setSize(height);\n            scroller.refreshMaxPosition();\n            scroller.fireEvent('refresh', scroller);\n\n            if (translatable.isAnimating && translatable.activeEasingY && translatable.activeEasingY.setMinMomentumValu",963630,34,"activeEasingY.setMinMomentumValue(-scroller.getMaxPosition().",700384,32,"},\n\n    handleItemTransform",1093328,51,"listItems = me.listItems,\n            itemsCount = listItems.length,\n            itemMap = me.getItemMap(),\n            scrollDockItems = me.scrollDockItems,\n            grouped = me.getGrouped(),\n            item, transY, i, jln, j;\n\n        for (i = 0; i < itemsCount; i++) {\n            item = listItems[i];\n            transY = itemMap.map[item.$dataIndex];\n\n            if (!item.$hidden && item.$position !== transY) {\n                item.$position = transY;\n\n                jln = scrollDockItems.top.length;\n                if (item.isFirst && jln",18201,33,"0",188526,38,"    scrollDockItems.top[j].translate(0, transY);\n                        transY += scrollDockItems.top[j].$scrollDockHeight",130016,42,"\n                if (grouped && me.getUseHeaders() && me.headerIndices && me.headerIndices[item.$dataIndex]) {\n                    item.getHeader().translate(0, transY);\n                    transY += me.headerHeight",209024,38,"tem.translate(0, transY);\n                transY += item.$ownItemHeight;\n\n                jln = scrollDockItems.bottom.length;\n                if (item.isLast && jln",18201,33,"0",188526,38,"    scrollDockItems.bottom[j].translate(0, transY);\n                        transY += scrollDockItems.bottom[j].$scrollDockHeight",378352,66,"    },\n\n    handlePinnedHeader: function(",676624,40,"pinnedHeader = me.pinnedHeader,\n            itemMap = me.getItemMap(),\n            groups = me.groups,\n            headerMap = me.headerMap,\n            headerHeight = me.headerHeight,\n            store = me.getStore(),\n            totalScrollDockTopHeight = me.totalScrollDockTopHeight,\n            record, closestHeader, pushedHeader, transY, headerString;\n\n        closestHeader = itemMap.binarySearch(headerMap, -y);\n        record = groups[closestHeader].children[0]",1657662,37,"pushedHeader = y + headerMap[closestHeader + 1] - headerHeight;\n            // Top of the list or above (hide the floating header offscreen)\n            if (y >= 0 || (closestHeader === 0 && totalScrollDockTopHeight + y >= 0) || (closestHeader === 0 && -y <= headerMap[closestHeader])) {\n                transY = -10000",334721,32,"croll the floating header a bit\n            else if (pushedHeader < 0) {\n                transY = pushedHead",1266800,33,"Stick to the top of the screen",497664,36,"transY = Math.max(0, y",1109412,36,"String = store.getGroupString(record);\n\n            if (pinnedHeader.$currentHeader != headerString) {\n                pinnedHeader.setHtml(headerString);\n                pinnedHeader.$currentHeader = headerString",145136,33,"pinnedHeader.$position != transY) {\n                pinnedHeader.translate(0, transY);\n                pinnedHeader.$position = transY",776944,38,"createItem",705888,33,"me = this,\n            container = me.container,\n            listItems = me.listItems,\n            infinite = me.getInfinite(),\n            scrollElement = me.scrollElement,\n            useHeaders = me.getUseHeaders(),\n            item, header, itemCls;\n\n        item = Ext.factory(config);\n        item.dataview = me;\n        item.$height = config.minHeight;\n\n        if (!infinite) {\n            itemCls = me.getBaseCls() + '-item-relative';\n            item.addCls(itemCls);\n        }\n\n        if (useHeaders) {\n            header = item.getHeader();\n            if (!infinite) {\n                header.addCls(itemCls",464704,40,"header.setTranslatable({\n                    translationMethod: this.translationMethod\n",1115087,36,"header.translate(0, -10000);\n\n                scrollElement.insertFirst(header.renderE",402528,32,"\n\n        container.doAdd(item);\n        listItems.push(item);",1038637,35,"setItemsCount: function(itemsCount",288192,39,"listItems = me.listItems,\n            config = me.getListItemConfig(),\n            difference = itemsCount - listItem",512239,34,"// This loop will create new items if the new itemsCount is higher than the amount of items we currently have\n        for (i = 0; i < difference; i++) {\n            me.createItem(config);\n        }\n\n        // This loop will destroy unneeded items if the new itemsCount is lower than the amount of items we currently have\n        for (i = difference; i < 0; i++) {\n            listItems.pop()",1059629,34,"itemsCount = itemsCount;\n\n        // Finally we update all the list items with the correct content\n        me.updateAllListItems();\n\n        //Android Stock bug where redraw is needed to show empty list\n",1846495,39," && me.container.element && itemsCount === 0 && difference !== 0) {\n            me.container.element.redraw();\n        }\n\n        return me.listItems",757145,57,"if (newUi && newUi != oldUi && newUi == 'round') {\n            this.setPinHeaders",773197,33,855648,41,"ListItem: function(item, index, info",288192,39,"record = info.store.getAt(index),\n            headerIndices = me.headerIndices,\n            footerIndices = me.footerIndices,\n            useHeaders = me.getUseHeaders(),\n            header = useHeaders && item.getHeader(),\n            scrollDockItems = me.scrollDockItems,\n            updatedItems = me.updatedItems,\n            currentItemCls = item.renderElement.classList.slice(),\n            currentHeaderCls = useHeaders && header.renderElement.classList.slice(),\n            infinite = me.getInfinite(),\n            storeCount = info.store.getCount(),\n            itemCls = [],\n            headerCls = [],\n            itemRemoveCls = [info.headerCls, info.footerCls, info.firstCls, info.lastCls, info.selectedCls, info.stripeCls],\n            headerRemoveCls = [info.headerCls, info.footerCls, info.firstCls, info.lastCls],\n            ln, i, scrollDockItem, classCache;\n\n        // When we update a list item, the header and scrolldocks can make it have to be retransformed.\n        // For that reason we want to always set the position to -10000 so that the next time we translate\n        // all the pieces are transformed to the correct location\n        if (infinite) {\n            item.$position = -10000;\n        }\n\n        // We begin by hiding/showing the item and its header depending on a record existing at this index\n        if (!record) {\n            item.setRecord(null);\n            if (infinite) {\n                item.translate(0, -10000",464704,40,"item",1088446,36,"if (useHeaders) {\n                if (infinite) {\n                    header.translate(0, -10000",1115104,48,"header.hide(",198256,47,"item.$hidden = true;\n            return;\n        } else if (item.$hidden) {\n            if (!infinit",866876,56,"    item.$hidden",1791264,33,"infinite) {\n            updat",1296844,39,"// If this item was previously used for the first record in the store, and now it will not be, then we hide\n        // any scrollDockTop items and change the isFirst flag\n        if (item.isFirst && index !== 0 && scrollDockItems.top.length",84736,33,"scrollDockItems.top",206816,40,"scrollDockItem = scrollDockItems.top[i];\n                if (infinite) {\n                    scrollDockItem.translate(0, -10000",198256,47,"item.isFirst",1795087,32,"If this item was previously used for the last record in the store, and now it will not be, then we hide\n        // any scrollDockBottom items and change the istLast flag\n        if (item.isLast && index !== storeCount - 1 && scrollDockItems.bottom.length",84736,33,"scrollDockItems.bottom",206816,40,"scrollDockItem = scrollDockItems.bottom[i];\n                if (infinite) {\n                    scrollDockItem.translate(0, -10000",198256,47,"item.isLast",1795087,32,"If the item is already bound to this record then we shouldn't have to do anything\n        if (item.$dataIndex !== index) {\n            item.$dataIndex = index;\n            me.fireEvent('itemindexchange', me, record, index, item);\n        }\n\n        // This is where we actually update the item with the record\n        if (item.getRecord() === record) {\n            item.updateRecord(record",1292432,32,"item.setRecord(record);\n        }\n\n        if (me.isSelected(record)) {\n            itemCls.push(info.selectedCls);\n        }\n\n        if (info.grouped && useHeaders) {\n            if (headerIndices[index]) {\n                itemCls.push(info.headerCls);\n                headerCls.push(info.headerCls);\n                header.setHtml(info.store.getGroupString(record));\n\n                if (!infinite) {\n                    header.renderElement.insertBefore(item",717375,33,"}\n                header.show(",464704,40,"if (infinite) {\n                    header.translate(0, -10000",1115104,48,"header.hide(",198256,47,"if (footerIndices[index]) {\n                itemCls.push(info.footerCls);\n                headerCls.push(info.foot",974688,41,"if (!info.grouped && useHeaders) {\n            header.hide(",1301168,32,"=== 0) {\n            item.isFirst = true;\n            itemCls.push(info.firstCls);\n            headerCls.push(info.firstCls);\n\n            if (!info.grouped) {\n                itemCls.push(info.headerCls);\n                headerCls.push(info.headerCl",501887,35,"!infinite) {\n",233487,33,"scrollDockItems.top",402080,44,"scrollDockItem = scrollDockItems.top[i];\n                    if (info.grouped) {\n                        scrollDockItem.renderElement.insertBefore(header",717375,33,70896,37,"scrollDockItem.renderElement.insertBefore(item",717375,33,644592,46,"}\n\n        if (index === storeCount - 1) {\n            item.isLast = true;\n            itemCls.push(info.lastCls);\n            headerCls.push(info.lastCls);\n\n            if (!info.grouped) {\n                itemCls.push(info.footerCls);\n                headerCls.push(info.footerCl",501887,35,"!infinite) {\n",233487,33,"scrollDockItems.bottom",402080,44,"scrollDockItem = scrollDockItems.bottom[i];\n                    scrollDockItem.renderElement.insertAfter(item",717375,33,1001472,35,"if (info.striped && index % 2 == 1) {\n            itemCls.push(info.stripeCls)",1774282,33,"temCls",1691407,32,"itemRemoveCls",188157,32,"Ext.Array.remove(currentItemCls, itemRemoveCl",1595806,33,"itemCls = Ext.Array.merge(itemCls, currentItemCls);\n        }\n\n        if (useHeaders && currentHeaderCls",1691407,32,"headerRemoveCls",188157,32,"Ext.Array.remove(currentHeaderCls, headerRemoveCl",1595806,33,"headerCls = Ext.Array.merge(headerCls, currentHeaderCls);\n        }\n\n        classCache = itemCls.join(' ');\n\n        if (item.classCache !== classCache) {\n            item.renderElement.setCls(itemCls);\n            item.classCache = classCache;\n        }\n\n        if (useHeaders) {\n            header.renderElement.setCls(headerCls",1286570,32,"llListItem",1093328,51,"store = me.getStore(),\n            items = me.listItems,\n            info = me.getListItemInfo(),\n            topRenderedIndex = me.topRenderedIndex",84684,34,"store",84736,33,817535,41,"    me.updateListItem(items[i], topRenderedIndex + i, info",699072,40,"me.isPainted()) {\n            if (me.getInfinite() && store && store.getCount()) {\n                me.handleItemHeights(",895044,32,"refreshScroller();\n        }\n    },\n\n    doR",991407,33,"me = this,\n            infinite = me.getInfinite(),\n            scroller = me.",945749,39,",\n            storeCount = me.getStore().getCount();\n\n        if (infinite) {\n            me.getItemMap().populate(storeCount, this.topRenderedIndex",1683456,32,"Grouped()) {\n            me.refreshHeaderIndices();\n        }\n\n        // This will refresh the items on the screen with the new data\n        if (storeCount) {\n            me.hideScrollDockItems();\n            me.hideEmptyText();\n            if (!infinite) {\n                me.setItemsCount(storeCount);\n                if (me.getScrollToTopOnRefresh()",1009670,32,".scrollTo(0, 0",1605008,58,"if (me.getScrollToTopOnRefresh()) {\n                    me.topRenderedIndex = 0;\n                    me.topVisibleIndex = 0;\n                    scroller.position.y = 0",859600,36,"me.updateAllListItems(",48352,46,"me.onStoreClear(",872702,36,"Resize: function(container, siz",1452352,40,"currentVisibleCount = me.visibleCount;\n\n        if (!me.headerHeight) {\n            me.headerHeight = parseInt(me.pinnedHeader.renderElement.getHeight(), 10",1683456,32,"Infinite()) {\n            me.visibleCount = Math.ceil(size.height / me.getItemMap().getMinimumHeight());\n            if (me.visibleCount != currentVisibleCount) {\n                me.setItemsCount(me.visibleCount + me.getBufferSize());\n                // This is a private event used by some plugins\n    ",1665790,32,"visiblecount', this, me.visibleCount, currentVisibleCoun",48351,33,"if (me.listItems.length && me.getUseHeaders() && me.getGrouped() && me.getPinHeaders()) {\n            // Whenever the container resizes, headers might be in different locations. For this reason\n            // we refresh the header position map\n            me.updateHeaderMap(",817647,32,"Scroll",1517453,38,";\n\n        if (me.isPainted()) {\n            if (!me.getInfinite() && me.getGrouped() && me.getPinHeaders()) {\n                me.updateHeaderMap(",672256,33,945749,40,"refresh",1516958,32,"HeaderMap",917791,50,"headerMap = me.headerMap,\n            headerIndices = me.headerIndices,\n            header, i;\n\n        headerMap.length = 0;\n        for (i in headerIndices) {\n            if (headerIndice",506416,39,"header = me.getItemAt(i).getHeader();\n                headerMap.push(header.renderElement.dom.offsetTop",1030640,44,"VariableHeights",1409422,33,"this.getInfinite()",365166,39,636255,34,"apply",1034844,45,"if (!defaultType) {\n            defaultType = this.getUseSimpleItems() ? 'simplelistitem' : 'listitem';\n        }\n        return defaultType;\n    },\n\n    applyItemMap: function(itemMap) {",1035636,32,"Map, Ext.util.PositionMap, this.getItemMap());\n    },\n\n    updateItemHeight: function(itemHeight) {\n        this.getItemMap().setMinimumHeight(itemHeight);\n    },\n\n    applyIndexBar: function(indexBa",1391037,32,"indexBar, Ext.dataview.IndexBar, this.getIndexBar());\n    },\n\n    updatePinHeaders: function(pinnedHeaders) {\n        if (this.isPainted()) {\n            this.pinnedHeader.translate(0, pinnedHeaders ? this.pinnedHeader.$position : -10000",954462,32,"temTpl: function(newTpl",288192,39,"listItems = me.listItems,\n            ln = listItems.length || 0,\n            i, listI",302239,53,"listItem = listItems[i];\n            listItem.setTpl(newTpl);\n        }\n\n        me.updateAllListItems();\n    },\n\n    updateItemCls: function(newCls, oldCls) {\n        var items = this.listItems",1056331,63,1287664,43," = items[i];\n            item.removeCls(oldCls);\n            item.addCls(newCls",954462,33,"dexBar: function(indexBar, oldIndexBa",386191,40,"scrollViewElement = me.scrollViewElement;\n\n        if (oldIndexBar) {\n            oldIndexBar.un({\n                index: 'onIndex'",1857245,57,"if (!indexBar)",1094294,46,"BaseCls() + '-indexed'",498400,34,"scrollViewElement) {\n                scrollViewElement.removeChild(oldIndexBar.renderE",402528,32,"\n\n        if (indexBar) {\n            indexBar.on({\n                index: 'onIndex'",1857245,57,"if (!oldIndexBar) {\n                me.element.addCls(me.getBaseCls() + '-indexed'",498400,34,"scrollViewElement) {\n                scrollViewElement.appendChild(indexBar.renderE",402528,32,"\n    },\n\n    updateGrouped: function(grouped",288192,39,757206,41,"pinnedHeader = me.pinnedHeader,\n            cls = baseCls + '-grouped',\n            unCls = baseCls + '-ungrouped';\n\n        if (pinnedHeader) {\n            pinnedHeader.translate(0, -10000);\n        }\n\n        if (grouped) {\n            me.addCls(cls);\n            me.removeCls(unCls",995264,40,"me.addCls(unCls);\n            me",1160446,36,"if (me.getInfinite()) {\n            me.refreshHeaderIndices();\n            me.handleItemHeights();\n        }\n        me.updateAllListItems();\n    },\n\n    onStoreAdd: function() {\n        this.doRefresh();\n    },\n\n    onStoreRemove: function() {\n        this.doRefresh();\n    },\n\n    onStoreUpdate: function(store, record, newIndex, oldI",1305583,47,";\n\n        oldIndex = (typeof oldIndex === 'undefined') ? newIndex : oldIndex;\n\n        if (me.getInfinite() || (oldIndex !== newIndex)) {\n            me.doRefresh",860496,41,"item = me.listItems[newIndex];\n    ",1043120,32,"    me.updateListItem(item, newIndex, me.getListItemInfo",1094350,41,"onStoreClea",1517454,51,"scroller = me.",945749,39,",\n            infinite = me.getInfinite();\n\n        if (me.pinnedHeader) {\n            me.pinnedHeader.translate(0, -10000);\n        }\n\n        if (!infinite) {\n            me.setItemsCount(0);\n            scroller.scrollTo(0, 0",1292432,32,"me.topRenderedIndex = 0;\n            me.topVisibleIndex = 0;\n            scroller.position.y = 0;\n            me.updateAllListItems();\n        }\n    },\n\n    showEmptyScrollDock",917791,50,"infinite = me.getInfinite(),\n            scrollDockItems = me.scrollDockItems,\n            offset = 0",867983,36,"for (i = 0, ln = scrollDockItems.top",206816,36,"item = scrollDockItems.top[i];\n            if (infinite) {\n                item",994466,35,"    offset += item.$scrollDockHeight",343120,39,"this.scrollElement.appendChild(item.renderE",402528,32,"\n\n        for (i = 0, ln = scrollDockItems.bottom",206816,36,"item = scrollDockItems.bottom[i];\n            if (infinite) {\n                item",994466,35,"    offset += item.$scrollDockHeight",343120,39,"this.scrollElement.appendChild(item.renderE",402528,32,"\n    },\n\n    hideScrollDockItem",1093328,51,"infinite = me.getInfinite(),\n            scrollDockItems = me.scrollDock",867978,41,"if (!infinite",1758959,43,"for (i = 0, ln = scrollDockItems.top",206816,36,"item = scrollDockItems.top[i];\n            item.translate(0, -10000",446879,39,"scrollDockItems.bottom",206816,36,"item = scrollDockItems.bottom[i];\n            item.translate(0, -100",977488,37," Returns an",1308895,36," @param {Number} index I",905533,34,"Ext.dom.Element/Ext.dataview.component.DataItem} item I",905471,34,"/\n    getItemAt",883599,32,"listItems = this.listItems,\n            ln = listItems.length,\n            i, listI",302239,53,"listItem = listItems[i];\n            if (listItem.$dataIndex == index) {\n                return listItem",776944,38,"/**\n     * Returns an index for the specified item.\n     * @param {Number} item The item to locate",1307318,32,"for the specified item.\n     */\n    getItemIndex",938671,34,"item.$dataIndex",484224,34,"n array of the current items in the DataView",412688,33,"[]/Ext.dataview.component.DataItem[]} Array of Items.\n     */\n    getViewItem",1752927,36,"listItems;\n    },\n\n    getListItemInfo",917791,50,"baseCls = me.getBaseCls()",957728,32,"store: me.getStore(),\n            grouped: me.getGrouped(),\n            baseCls: baseCls,\n            selectedCls: me.getSelectedCls(),\n            headerCls: baseCls + '-header-wrap',\n            footerCls: baseCls + '-footer-wrap',\n            firstCls: baseCls + '-item-first',\n            lastCls: baseCls + '-item-last',\n            stripeCls: baseCls + '-item-odd',\n            striped: me.getStriped(),\n            itemMap: me.getItemMap(),\n            defaultItemHeight: me.getItem",766332,32,"getListItem",994877,33,"me = this,\n            minimumHeight = me.getItemMap().getMinimumHeight(),\n",1555151,39,"xtype: me.getDefaultType(),\n                itemConfig: me.getItemConfig(),\n                tpl: me.getItemTpl(),\n                minHeight: minimumHeight,\n                cls: me.getItemCls()\n            };\n\n        if (me.getInfinite()) {\n            config.translatable = {\n                translationMethod: this.translationMethod",936304,35,"if (!me.getVariableHeights()) {\n            config.height = minimumHeight;",1001487,47,"refreshHeaderIndice",1093328,51,"store = me.getStore(),\n            storeLn = store && store.getCount(),\n            groups = store.getGroups(),\n            grouped = me.getGrouped(),\n            groupLn = groups.length,\n            headerIndices = me.headerIndices = {},\n            footerIndices = me.footerIndices = {},\n            i, previousIndex, firstGroupedRecord, storeIndex;\n\n        if (!grouped) {\n            return footerIndices;\n        }\n        me.groups = groups;\n\n        for (i = 0; i < groupLn; i++) {\n            firstGroupedRecord = groups[i].children[0];\n            storeIndex = store.indexOf(firstGroupedRecord);\n            headerIndices[storeIndex] = true;\n\n            previousIndex = storeIndex - 1;\n            if (previousIndex >= 0) {\n                footerIndices[previousIndex]",1530880,33,"\n        footerIndices[storeLn - 1] = true;\n\n        return headerIndices;\n    },\n\n    onIndex: function(indexBar, ",1384208,44,"key = index.toLowerCase(),\n            store = me.getStore(),\n            groups = store.getGroups(),\n            ln = groups.length,\n            group, i, closest",1560784,54,"group = groups[i];\n            id = group.name.toLowerCase();\n            if (id >= key) {\n                closest = group",629632,37,1031296,38,"losest = group",334944,40,"losest) {\n            this.scrollToRecord(closest.children[0]",111856,35,"\n     * Scrolls the list so that the specified record is at the top.\n     *\n     * @param record {Ext.data.Model} Record in the lists store to scroll to\n     * @param animate {Boolean} Determines if scrolling is animated to a cut\n     * @param overscroll {Boolean} Determines if list can be overscrolled\n     */\n    scrollToRecord: function(record, animate, overscroll",288192,39,"scroller = me.",945749,39,",\n            store = me.getStore(),\n            index = store.indexOf(record);\n\n        //stop the scroller from scrolling\n        scroller.stopAnimation();\n\n        //make sure the new offsetTop is not out of bounds for the scroller\n        var c",1006521,42,".y,\n            size = scroller.getSize().y,\n            maxOffset = size - containerSize,\n            offset, item;\n\n        if (me.getInfinite()) {\n            offset = me.getItemMap().map[index]",457376,39,"item = me.listItems[index];\n            if (me.getUseHeaders() && item.getHeader()",1010693,32,"offset = item.getHeader().renderElement.dom.offsetTop",101376,51,"offset = item.renderElement.dom.offsetTop",334944,39,"!overscroll) {\n            offset = Math.min(offset, maxOffset);\n        }\n\n        scroller.scrollTo(0, offset, !!animate",813324,55,"me = this,\n            config = item.config;\n\n        if (config.scrollDock) {\n            if (config.scrollDock == 'bottom') {\n                me.scrollDockItems.bottom.push(item",464704,40,"me.scrollDockItems.top.push",1039005,36,"f (me.getInfinite()) {\n                item",712540,37,"ScrollDockItemResize",779908,34,1505406,38,"item.addCls(me.getBaseCls() + '-scrolldockitem');\n                item.setTranslatable({\n                    translationMethod: this.translationMethod\n",1115087,36,"item.translate(0, -10000);\n                item.$scrollDockHeight",986927,33,"me.container.doAdd(",1293904,36,"me",140381,32,"}",909984,33,"ll the items that are docked in the scroller in this list.\n",76384,32,"of the scrollDock items\n     */\n    getScrollDockedItem",1752927,36,"scrollDockItems.bottom.slice().concat(this.scrollDockItems.top.slice());\n    },\n\n    onScrollDockItemResize: function(dockItem, siz",1452352,40,"items = me.listItems",1056331,63,"Ext.getCmp(dockItem.id).$scrollDockHeight = size.height",1563504,50,1050137,40,"Last) {\n                this.updat",819930,32,"    this.refreshScroller(",629631,38,"}\n        }\n    },\n\n    onItem",1807934,34,"this.container.innerElement.on({\n            touchmove: 'onItemTouchMove',\n            delegate: '.' + Ext.baseCSSPrefix + 'list-item',\n",779952,38,"scope: this\n        });\n        this.callParent(this.parseEvent(e));\n    },\n\n    onItem",1794320,33,"this.callParent(this.parseEvent(e));\n    },\n\n    onItem",1787839,32,"this.container.innerElement.un({\n            touchmove: 'onItemTouchMove',\n            delegate: '.' + Ext.baseCSSPrefix + 'list-item',\n",712654,32,"});\n        this.callParent(this.parseEvent(e));\n    },\n\n    onItemTap: function(e) {\n        this.callParent(this.parseEvent(e));\n    },\n\n    onItemTapHold: function(e) {\n        this.callParent(this.parseEvent(e));\n    },\n\n    onItemSingleTap: function(e) {\n        this.callParent(this.parseEvent(e));\n    },\n\n    onItemDoubleTap: function(e) {\n        this.callParent(this.parseEvent(e));\n    },\n\n    onItemSwipe: function(e) {\n        this.callParent(this.parseEvent(e));\n    },\n\n    parse",1014669,33,1774796,32,"Ext.fly(e.getTarget()).findParent('.' + Ext.baseCSSPrefix + 'list-item', 8),\n            item = Ext.getCmp(target.id);\n\n        return [me, item, item.$dataIndex, e];\n    },\n\n    doItemSelect: function(me, record",1882558,49,"var item = me.getItemAt(me.getStore().indexOf(record));\n        if (me.container && !me.isDestroyed && item && ",1036181,33,"tem.classCache = item.renderElement.classList.slice();\n        }\n    },\n\n    doItemDeselect: function(me, record",1882558,49,"var item = me.getItemAt(me.getStore().indexOf(record));\n        if (item && ",1036181,33,"tem.classCache = item.renderElement.classList.slic",772615,32,"OnItemDisclosure",1000832,33,1555121,38,"return {",779406,46,"handler",1001001,34,1055358,35,"handleItemDisclosure",1774768,51,"item = Ext.getCmp(Ext.get(e.getTarget()).up('.x-list-item').id),\n            index = item.$dataIndex,\n            record = me.getStore().getAt(index);\n\n        me.fireAction('disclose', [me, record, item, index, e], 'doDisclose');\n    },\n\n    doDisclose: function(me, record, item, index, e) {\n        var onItemDisclosure = me.getOnItemDisclosure();\n\n        if (onItemDisclosure && onItemDisclosure.handler) {\n            onItemDisclosure.handler.call(onItemDisclosure.scope || me, record, item, index, e);\n        }\n    },\n\n    // apply to the selection model to maintain visual UI cues\n    onItemTrigger: function(me, index, target, record, e) {\n        if (!(this.getPreventSelectionOnDisclose() && Ext.fly(e.target).hasCls(this.getBaseCls() + '-disclosure'))) {\n",1880877,48,"}",1008079,47,937150,34,"listI",1041303,50,";\n",933760,35,"\n        if (me.onIdleBound) {",1772176,32,"unIdle(me.onAnimationIdle, m",448112,33,1286832,33,"s[i].destroy();\n        }\n        me.listItems = null",1707552,185614,"model/MyModel",1899037,513,"model.MyModel', {\n    extend: 'Ext.data.Model',\n\n    config: {\n    }\n});\n\n/*\n * File: app/model/Vuelo",1899037,513,"model.Vuelo', {\n    extend: 'Ext.data.Mod",1899584,42,1901838,37,"entifier: {\n            type: 'uuid'\n        },\n        field",1899871,35,"name: 'nVuelo',\n    ",1414134,35,1902317,37,"name: 'aerolinea',\n    ",1414134,35,1902317,37,"name: 'origen',\n    ",1414134,35,1902317,37,"name: 'via',\n    ",1414134,35,1902317,37,"name: 'estadosp',\n    ",1414134,35,1902317,37,"name: 'estadoin',\n    ",1414134,35,1902317,37,"name: 'terminal',\n    ",1414134,35,1902317,37,"name: 'sector',\n    ",1414134,35,1902317,37,"name: 'cinta',\n    ",1414134,35,1902317,37,"name: 'reclamo',\n    ",1414134,35,1902317,37,"name: 'festima',\n    ",1414134,35,1902317,37,"name: 'fprogram',\n    ",1414134,35,1902317,37,"name: 'freal',\n    ",1414134,35,1902317,37,"name: 'destino',\n    ",1414134,35,1902317,37,"name: 'checkin',\n    ",1414134,35,1902317,37,"name: 'puerta',\n    ",1414134,35,1902317,37,"name: 'esArribo',\n                type: 'boolean",1900080,47,"name: 'aeropuerto',\n    ",1414134,35,"    }\n        ]\n    }\n});\n\n/*\n * File: app/store/Arribos",1899037,513,"store.Arribos",1698957,35,"\n",847424,56,1548055,93,"\n      \n\n    config: {\n        model: 'Aeropuerto.model.Vuelo',\n        storeId: 'Arribos',",1699069,37,"ajax',\n            type: 'localstorage',\n            reader: {\n                type: 'xml',\n                record: 'Vuelo'",998784,38,"\n * File: app/store/Partidas",1899037,513,"store.Partidas",1698957,35,"\n",847424,56,1548055,93,"\n      \n\n    config: {\n        model: 'Aeropuerto.model.Vuelo',\n        storeId: 'Partidas',",1699069,37,"ajax',\n            type: 'localstorage',\n            reader: {\n                type: 'xml',\n                record: 'Vuelo'",998784,38,"\n * File: app/view/MyContainer",1899037,519,"yContainer",1839196,39,1730640,33,"\n       ",716896,51,940798,48,"layout: 'hbox",1899856,58,"container',\n                hidden: true,\n                id: 'navigation',\n",1170815,34,":black;',\n                width: '20%',\n                layout: 'card",1162816,115,"docked: 'top',\n        ",1899954,44,1899990,47,1900029,36,1900057,37,1164448,98,"height: 60",1894227,38,"Departures',\n        ",1900213,45,1900250,39,1163213,109,"flex: 1,\n                cls: 'slide',\n                height: '100%',\n                id: 'main',\n                width: '100%',\n                zIndex: 5,\n                layout: 'card",1162816,82,"toolbar',\n       ",534382,37,"                   id: 'main-toolbar',\n                        ui: 'light',\n                        title: 'Main',\n        ",1894141,45,1164256,34,1162269,49,"        id: 'my",1162285,33,"        itemId: 'mybutton4'",1603472,34,1902217,43,1902252,37,142592,34,"]",1162122,78,"list',\n       ",534382,37,"                   height: '100%',\n                        id: 'lstArribos',\n                        width: '100%',\n                        itemTpl: [\n                            '<div>{origen}<br>{fprogram} - {estadosp}</div>'\n                        ],\n                        store: 'Arribos",304640,45,1162036,34,"list',\n       ",534382,37,"                   height: '100%',\n    ",1071128,32,",\n                        id: 'lstPartidas',\n                        width: '100%',\n                        itemTpl: [",677218,32,"                          \\'<div>{origen}<br>{fprogram} - {estadosp}</div>\\'",676192,32,"'\n                        ],\n                        store: 'Partidas",1162336,55,1900095,40,"container',\n                hidden: true,\n                id: 'details",1162816,82,"c",1069581,35,"id: 'info',\n        ",1894141,45,1164256,34,1163278,44,"                id: 'photo'",1603472,34,"tpl: [\n",46240,36,"'<h2>{terminal}</h2>'\n",46240,32,"]\n        ",18350,38,"        ",1003376,55,"\n        ],\n        listener",1899871,35,"fn: 'onMybuttonTap',\n                event: 'tap',\n                delegate: '#mybutton'\n            }\n        ]\n    },\n\n    onMyb",1898447,47,"var c = Ext.getCmp('navigation",1897314,77,"Navigation",1897395,47,"\n",1897598,39,");",1898621,61,"\n        if (Ext.getCmp('navigation').isHidden()) {\n                    Ext.getCmp('navigation').show({type: 'slideIn', direction: 'right', duration: 70});\n                }else {\n                    Ext.getCmp('navigation')",1898622,68,"        }\n\n        /*\n                var main = Ext.get('main');\n\n\n                if (main.hasCls('out')) {\n                    main.removeCls('out');\n                    main.addCls('in');\n                    button.setText('Open'",1115104,48,"main.removeCls('in');\n                    main.addCls('out');\n                    button.setText('Close');\n                }\n        */",1894545,961,",\n            \"#lstArribos\": {\n                itemtap: 'onListItemTap1'",770896,37,1895529,54,"        /*\n        var soapMessage ='<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns=\"http://tempuri.org/GetArrivals\"><soap:Header/><soap:Body><GetArrivalsResult><Vuelo><nVuelo>string</nVuelo><aerolinea>string</aerolinea><origen>string</origen><via>string</via><estadosp>string</estadosp><estadoin>string</estadoin><terminal>string</terminal><sector>string</sector><cinta>string</cinta><reclamo>string</reclamo><festima>dateTime</festima><fprogram>dateTime</fprogram><freal>dateTime</freal><destino>string</destino><checkin>string</checkin><puerta>string</puerta><esArribo>boolean</esArribo><aeropuerto>string</aeropuerto></Vuelo><Vuelo><nVuelo>string</nVuelo><aerolinea>string</aerolinea><origen>string</origen><via>string</via><estadosp>string</estadosp><estadoin>string</estadoin><terminal>string</terminal><sector>string</sector><cinta>string</cinta><reclamo>string</reclamo><festima>dateTime</festima><fprogram>dateTime</fprogram><freal>dateTime</freal><destino>string</destino><checkin>string</checkin><puerta>string</puerta","><esArribo>boolean</esArribo><aeropuerto>string</aeropuerto></Vuelo></GetArrivalsResult></soap:Body></soap:Envelope>';\n\n\n\n     ",1895584,49,"url: 'http://10.0.1.182/AICMobileService/MobileWS.asmx',\n                   callbackKey: 'callback',\n                   scope: 'this',\n",1895627,55,"params : {filter:'\"\"'},\n                   headers: {'Content-Type': 'application/soap+xml; charset=utf-8; action=\"http://tempuri.org/GetArrivals\"'},\n  ",1191198,35,"response) {\n                      // OK\n                       alert(\"ok\");\n",1896292,76,"alert(response.responseXML);\n                       var jsonData = Ext.util.XML.decode",1896320,48,"alert(jsonData);\n",1896358,35,"\"prueba\");\n",1896358,34," (jsonData);\n",304764,42,"failure: function(response) {\n                      // KO\n                        alert(\"errpr\");\n",1896291,44,"seText);\n",304764,41,"xmlData: soapMessage\n                });\n        */\n\n\n",1898576,44,1897326,331,1897667,166,"/*",1897833,581," */\n\n        Ext.getCmp('navigation')",1898622,72,"c = Ext.getCmp('main-toolbar');\n        var p = Ext.getCmp('lstPartidas');\n        p.hide();\n        var a = Ext.getCmp('lstArribos');\n        a.show();\n        c.setTitle('Arribos');",651759,35,"getArrivals(",1898412,171,"/*",1897289,37,1898620,379,"*/\n\n        Ext.getCmp('navigation')",1898622,72,"c = Ext.getCmp('main-toolbar');\n        c.setTitle('Partidas');\n        var p = Ext.getCmp('lstPartidas');\n        p.show();\n        var a = Ext.getCmp('lstArribos');\n        a.hide();",651759,35,"getDepartures();\n    },\n\n    onListItemTap1: function(dataview, index, target, record, e, eOpts) {\n                var info;\n\n        ",1533372,50,"    var c = Ext.getCmp('details');\n                ",1897318,41,"               alert(\"MUERTEEE",1418368,50,"        c.setTitle(\"Vuelo\");\n",1163728,32," set the info\n                            info = c.child('#info');\n                            info.child('#photo').setData(record.data);\n                           // info.child('#data').setData(record.data",515567,32,"c.show",342096,32,"var p = Ext.getCmp('lstPartidas');\n                p.hide();\n                var a = Ext.getCmp('lstArribos');\n                a.hide();\n\n                        }\n    },\n\n",1234346,33,"var me = this;\n        //\tAeropuerto.Controller.getVuelos\n              me.getArrivals();\n               // AIC.Global.getDepartures();\n\n               // Ext.Viewport.add(Ext.create('Aeropuerto.view.Main'));\n    },\n\n    getArrival",1093328,37,";\n        var xmlParams = '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetArrivals xmlns=\"http://tempuri.org/\"><filter></filter></GetArrivals></soap:Body></soap:Envelope>';\n                    \t me.getVuelos('GetArrivals', 'Arribos', xmlParams);\n    },\n\n    getVuelos: function(tipo, laTienda, parametros) {\n",1896586,35,1895682,66,"',\n        ",1471922,33,"false,\n                    headers: {\n                        'Content-Type': 'text/xml; charset=utf-8',\n                        'SOAPAction': 'http://tempuri.org/' + tipo",304762,44,1895646,36,"params: parametros,\n   ",1191198,35,"response",277794,32,"vuelos = response.responseXML.getElementsByTagName('Vuelo');\n                        var tienda = Ext.getStore(laTienda);\n                        tienda.getProxy().clear();\n                        tienda.data.clear();\n                        tienda.sync",1586834,32,"each(vuelos, function(vuelo",277952,32,"tienda.addData(vuelo);\n                        }, this);\n                        tienda.sync();\n                        tienda.load();",304762,44,"failure: function(response) {\n",1896291,78,"console.log",1896320,45,"}\n                });\n    },\n\n    getDepartures: function() {\n        var xmlParams = '<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><GetDepartures xmlns=\"http://tempuri.org/\"><filter></filter></GetDepartures></soap:Body></soap:Envelope>';\n            \tthis.getVuelos('GetDepartures', 'Partidas', xmlParams);\n    },\n\n    onListItemTap: function(dataview, index, target, record, e, eOpts) {\n        var info;\n",1533371,47,"var c = Ext.getCmp('details');\n        ",1897318,41,"       alert(\"MUERTEEE\"",320272,36,"//     c.setTitle(\"Vuelo\");\n\n\n                    // set the info\n                    info = c.child('#info');\n                    info.child('#photo').setData(record.data);\n                   // info.child('#data').setData(record.data);\n\n                    c.show();\n                    var p = Ext.getCmp('lstPartidas');\n        p.hide();\n        var a = Ext.getCmp('lstArribos');\n        a.hide();\n\n                }",1898999,595,1899639,218,1898999,34,"Arrivals",1899037,518,1893697,876,1899037,490,1900818,78,"    models: [\n        'MyModel',\n        'Vuelo'\n    ],\n    stores: [\n        'Arribos',\n        'Partidas'\n    ],",1900938,48,",\n        'MyContainer",1900985,143,"MyContainer",1901136,37,1902474,72]